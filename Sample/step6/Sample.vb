'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.4952
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace Sample
    
    '''<summary>
    '''This is a sample embeddable class representing an address.
    '''</summary>
    Partial Public Class Address1
        Inherits InterSystems.Data.CacheTypes.CacheSerialObject
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Address1"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 51887
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(23)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(0)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(4)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Address1", GetType(Address1))
            
            Sample.Address1.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("City", 4, 0, 1518))
            Sample.Address1.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("State", 4, 0, 1518))
            Sample.Address1.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Street", 4, 0, 1518))
            Sample.Address1.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Zip", 4, 0, 1518))
            
            Sample.Address1.CheckSumMethodDict.Add("%ClassName", 4853)
            Sample.Address1.CheckSumMethodDict.Add("%Delete", 286)
            Sample.Address1.CheckSumMethodDict.Add("%DeleteId", 61438)
            Sample.Address1.CheckSumMethodDict.Add("%IsA", 40977)
            Sample.Address1.CheckSumMethodDict.Add("%Open", 34987)
            Sample.Address1.CheckSumMethodDict.Add("%OpenId", 6240)
            Sample.Address1.CheckSumMethodDict.Add("CityDisplayToLogical", 59650)
            Sample.Address1.CheckSumMethodDict.Add("CityIsValid", 4756)
            Sample.Address1.CheckSumMethodDict.Add("CityLogicalToDisplay", 59650)
            Sample.Address1.CheckSumMethodDict.Add("LogicalToOdbc", 11314)
            Sample.Address1.CheckSumMethodDict.Add("OdbcToLogical", 11314)
            Sample.Address1.CheckSumMethodDict.Add("OnPopulate", 6533)
            Sample.Address1.CheckSumMethodDict.Add("Populate", 60597)
            Sample.Address1.CheckSumMethodDict.Add("PopulateSerial", 28057)
            Sample.Address1.CheckSumMethodDict.Add("StateDisplayToLogical", 59650)
            Sample.Address1.CheckSumMethodDict.Add("StateIsValid", 4756)
            Sample.Address1.CheckSumMethodDict.Add("StateLogicalToDisplay", 59650)
            Sample.Address1.CheckSumMethodDict.Add("StreetDisplayToLogical", 59650)
            Sample.Address1.CheckSumMethodDict.Add("StreetIsValid", 4756)
            Sample.Address1.CheckSumMethodDict.Add("StreetLogicalToDisplay", 59650)
            Sample.Address1.CheckSumMethodDict.Add("ZipDisplayToLogical", 59650)
            Sample.Address1.CheckSumMethodDict.Add("ZipIsValid", 4756)
            Sample.Address1.CheckSumMethodDict.Add("ZipLogicalToDisplay", 59650)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal arg As String)
            MyBase.New
            Try 
                System.Threading.Monitor.Enter(conn)
                Me.Init(conn, Sample.Address1.ServerClassName, arg)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            MyBase.New
            Try 
                System.Threading.Monitor.Enter(conn)
                Me.Init(conn, Sample.Address1.ServerClassName)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''The city name.
        '''</summary>
        Public Overridable Property City() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 4)
                        Me.GetPropertyS("City", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("City", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''State(Province)
        '''</summary>
        Public Overridable Property State() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 4)
                        Me.GetPropertyS("State", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("State", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''The street address.
        '''</summary>
        Public Overridable Property Street() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 4)
                        Me.GetPropertyS("Street", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Street", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''The 5-digit U.S. Zone Improvement Plan (ZIP) code.
        '''</summary>
        Public Overridable Property Zip() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 4)
                        Me.GetPropertyS("Zip", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Zip", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Returns the object's class name. The <var>fullname</var> determines how the
        '''class name is represented. If it is 1 then it returns the full class name
        '''including any package qualifier. If it is 0 (the default) then it returns the
        '''name of the class without the package, this is mainly for backward compatibility
        '''with the pre-package behaviour of %ClassName.
        '''</summary>
        Public Shared Function SysClassName(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal fullname As System.Nullable(Of Boolean)) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(fullname, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "%ClassName", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Deletes streams referenced by this object and calls %Delete on any embedded objects
        '''
        '''Refer to <LINK href=/AboutConcurrency.html>About Concurrency</LINK> for more details 
        '''on the optional <var>concurrency</var> argument.
        '''
        '''<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        '''
        '''</summary>
        Public Shared Function SysDelete(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal oid() As Byte, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(oid, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "%Delete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Deletes the stored version of the object with ID <var>id</var> from the database. 
        '''
        '''<p><METHOD>%DeleteId</METHOD> is identical in operation to the <METHOD>%Delete</METHOD> method except 
        '''that it uses and Id value instead of an OID value to find an object.
        '''
        '''Refer to <LINK href=/AboutConcurrency.html>About Concurrency</LINK> for more details 
        '''on the optional <var>concurrency</var> argument.
        '''</summary>
        Public Shared Function SysDeleteId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(id, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "%DeleteId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns true (1) if instances of this class are also instances of the isclass parameter.
        '''That is 'isclass' is a primary superclass of this object.
        '''</summary>
        Public Shared Function SysIsA(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal isclass As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(isclass, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "%IsA", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Creates an instance (in-memory version) of a serial object from the 
        '''serialized value <var>initvalue</var>.
        '''</summary>
        Public Shared Function SysOpen(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal initvalue() As Byte) As InterSystems.Data.CacheTypes.CacheObject
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(InterSystems.Data.CacheTypes.CacheObject))
                    mtdSignature.Add(initvalue, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "%Open", mtdSignature)
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,InterSystems.Data.CacheTypes.CacheObject)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Swizzles a serial object from the value passed and returns an OREF referring to the object. 
        '''<var>initvalue</var> is the Id (serial value, not a full OID) value of the object to swizzle.
        '''
        '''<p><METHOD>%OpenId</METHOD> is identical in operation to the <METHOD>%Open</METHOD> method except 
        '''that it uses and Id value instead of an OID value to find an object instance.
        '''
        '''<p><METHOD>%OpenId</METHOD> returns an OREF value that refers to the in-memory object instance.
        '''</summary>
        Public Shared Function SysOpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal initvalue As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.CacheTypes.CacheStatus) As InterSystems.Data.CacheTypes.CacheObject
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(InterSystems.Data.CacheTypes.CacheObject))
                    mtdSignature.Add(initvalue, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "%OpenId", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,InterSystems.Data.CacheTypes.CacheObject)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CityDisplayToLogical
        '''</summary>
        Public Shared Function CityDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "CityDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CityIsValid
        '''</summary>
        Public Shared Function CityIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "CityIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CityLogicalToDisplay
        '''</summary>
        Public Shared Function CityLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "CityLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method LogicalToOdbc
        '''</summary>
        Public Shared Function LogicalToOdbc(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal val As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(val, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "LogicalToOdbc", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OdbcToLogical
        '''</summary>
        Public Shared Function OdbcToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal val As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(val, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "OdbcToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OnPopulate
        '''</summary>
        Public Overridable Function OnPopulate() As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    Me.RunMethodS("OnPopulate", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Creates up to <var>count</var> instances an object and stores 
        '''them in the database.
        '''
        '''<p>If <var>verbose</var> is true, then details are echoed to the console.
        '''<p>If <var>DeferIndices</var> is true, then indices are sorted at the end of the operation.
        '''<p>If <var>objects</var> is true, then each object that is created is returned in the objects array
        '''<p>If <var>tune</var> is true, then TuneTable^%apiSQL is called after the instances of the class have been created.
        '''
        '''<P>Returns the number of instances successfully created.
        '''
        '''<p>For more information refer to 
        '''<LINK href=DocBook.UI.Page.cls?KEY=GOBJ_populate>The Cach&eacute; Populate Utility</LINK>.
        '''</summary>
        Public Shared Function Populate(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal count As System.Nullable(Of Long), ByVal verbose As System.Nullable(Of Long), ByVal DeferIndices As System.Nullable(Of Long), ByRef objects As System.Nullable(Of Long), ByVal tune As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(count, false)
                    mtdSignature.Add(verbose, false)
                    mtdSignature.Add(DeferIndices, false)
                    mtdSignature.Add(objects, true)
                    mtdSignature.Add(tune, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "Populate", mtdSignature)
                    objects = CType(mtdSignature.Arguments(3),InterSystems.Data.CacheTypes.CacheIntArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Create a single instance of a serial object.
        '''</summary>
        Public Shared Function PopulateSerial(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "PopulateSerial", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method StateDisplayToLogical
        '''</summary>
        Public Shared Function StateDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "StateDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method StateIsValid
        '''</summary>
        Public Shared Function StateIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "StateIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method StateLogicalToDisplay
        '''</summary>
        Public Shared Function StateLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "StateLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method StreetDisplayToLogical
        '''</summary>
        Public Shared Function StreetDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "StreetDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method StreetIsValid
        '''</summary>
        Public Shared Function StreetIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "StreetIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method StreetLogicalToDisplay
        '''</summary>
        Public Shared Function StreetLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "StreetLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method ZipDisplayToLogical
        '''</summary>
        Public Shared Function ZipDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "ZipDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method ZipIsValid
        '''</summary>
        Public Shared Function ZipIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "ZipIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method ZipLogicalToDisplay
        '''</summary>
        Public Shared Function ZipLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "ZipLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Address1.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Address1.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Dim metaInfo As InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Address1.ServerClassName)
            If metaInfo.Validate(Sample.Address1.ClassCheckSum, Sample.Address1.PropertyInfoColn, Sample.Address1.CheckSumMethodDict, Sample.Address1.CheckSumQueryDict, Sample.Address1.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Sample.Address1.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Address1.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Address1.AllPropertiesInfoColn
            End If
            Sample.Address1.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Address1.PropertyInfoColn)
            Return Sample.Address1.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Address1.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Car
    '''</summary>
    Partial Public Class Car
        Inherits InterSystems.Data.CacheTypes.CachePersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Car"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(17)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(2)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Car", GetType(Car))
            
            Sample.Car.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Maker", 0, 0, 58102))
            Sample.Car.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", 4, 0, 1518))
            
            Sample.Car.CheckSumMethodDict.Add("%ComposeOid", 25785)
            Sample.Car.CheckSumMethodDict.Add("%DeleteExtent", 2558)
            Sample.Car.CheckSumMethodDict.Add("%IsA", 40977)
            Sample.Car.CheckSumMethodDict.Add("%SaveIndices", 30436)
            Sample.Car.CheckSumMethodDict.Add("IDKEYDelete", 46328)
            Sample.Car.CheckSumMethodDict.Add("IDKEYExists", 13237)
            Sample.Car.CheckSumMethodDict.Add("IDKEYOpen", 60047)
            Sample.Car.CheckSumMethodDict.Add("MakerGetObject", 44394)
            Sample.Car.CheckSumMethodDict.Add("MakerGetObjectId", 4555)
            Sample.Car.CheckSumMethodDict.Add("MakerIsValid", 30030)
            Sample.Car.CheckSumMethodDict.Add("MakerSetObject", 15000)
            Sample.Car.CheckSumMethodDict.Add("MakerSetObjectId", 27957)
            Sample.Car.CheckSumMethodDict.Add("NameDisplayToLogical", 59650)
            Sample.Car.CheckSumMethodDict.Add("NameIsValid", 4756)
            Sample.Car.CheckSumMethodDict.Add("NameLogicalToDisplay", 59650)
            Sample.Car.CheckSumMethodDict.Add("Populate", 60597)
            Sample.Car.CheckSumMethodDict.Add("PopulateSerial", 28057)
            
            Sample.Car.CheckSumQueryDict.Add("Extent", 29957)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal arg As String)
            MyBase.New
            Try 
                System.Threading.Monitor.Enter(conn)
                Me.Init(conn, Sample.Car.ServerClassName, arg)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            MyBase.New
            Try 
                System.Threading.Monitor.Enter(conn)
                Me.Init(conn, Sample.Car.ServerClassName)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Projection of property Maker
        '''</summary>
        Public Overridable Property Maker() As Sample.Supplier
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Supplier))
                        Me.GetPropertyS("Maker", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Supplier)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Maker", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Name
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 4)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''%ComposeOid()
        '''
        '''		This class method accepts an ID and returns a fully qualified OID, containing the most specific type class of the object identified by the
        '''		<var>id</var> argument. If default storage is used then the %%CLASSNAME value is used to determine the most specific type class, otherwise call
        '''		%OnDetermineClass to determine the most specific type class. If neither case is true then the current class is
        '''		used. If there is a problem determining the most specific type class then null ("") is returned.
        '''</summary>
        Public Shared Sub SysComposeOid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, -1)
                    mtdSignature.Add(id, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "%ComposeOid", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Delete all instances of this class from its extent. On exit <var>instancecount</var> 
        '''contains the original number of instances while <var>deletecount</var> contains 
        '''the number of instances actually deleted.
        '''
        '''<p>Internally, <METHOD>%DeleteExtent</METHOD> iterates over the set of instances in the 
        '''collection and invokes the <METHOD>%Delete</METHOD> method.
        '''
        '''Refer to <LINK href=/AboutConcurrency.html>About Concurrency</LINK> for more details 
        '''on the optional <var>concurrency</var> argument.
        '''
        '''<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        '''</summary>
        Public Shared Function SysDeleteExtent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal concurrency As System.Nullable(Of Long), ByRef deletecount As String, ByRef instancecount As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(deletecount, true)
                    mtdSignature.Add(instancecount, true)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "%DeleteExtent", mtdSignature)
                    deletecount = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    instancecount = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns true (1) if instances of this class are also instances of the isclass parameter.
        '''That is 'isclass' is a primary superclass of this object.
        '''</summary>
        Public Shared Function SysIsA(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal isclass As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(isclass, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "%IsA", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Files the indices for all objects whose ID is in the range defined by <var>pStartId</var> and <var>pEndId</var>.
        '''If <var>pEndId</var> is null then it defaults to <var>pStartId</var>. If <var>pStartId</var> is null then the
        '''range is empty and no filing will occur.
        '''
        '''If <var>lockExtent</var> is true then an extent lock will be acquired before the indices
        '''are built. If the lock cannot be acquired then an error is returned. The lock is released
        '''after the index filing is completed.
        '''
        '''
        '''
        '''<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        '''</summary>
        Public Shared Function SysSaveIndices(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal pStartId As String, ByVal pEndId As String, ByVal lockExtent As System.Nullable(Of Boolean)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(pStartId, false)
                    mtdSignature.Add(pEndId, false)
                    mtdSignature.Add(lockExtent, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "%SaveIndices", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 9)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Car))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Car)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method MakerGetObject
        '''</summary>
        Public Overridable Function MakerGetObject(ByVal force As System.Nullable(Of Long)) As Byte()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 3)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("MakerGetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBinaryReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method MakerGetObjectId
        '''</summary>
        Public Overridable Function MakerGetObjectId(ByVal force As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 4)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("MakerGetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method MakerIsValid
        '''</summary>
        Public Shared Function MakerIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal value As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(value, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "MakerIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method MakerSetObject
        '''</summary>
        Public Overridable Function MakerSetObject(ByVal newvalue() As Byte) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newvalue, false)
                    Me.RunMethodS("MakerSetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method MakerSetObjectId
        '''</summary>
        Public Overridable Function MakerSetObjectId(ByVal newid As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newid, false)
                    Me.RunMethodS("MakerSetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameDisplayToLogical
        '''</summary>
        Public Shared Function NameDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "NameDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameIsValid
        '''</summary>
        Public Shared Function NameIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "NameIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameLogicalToDisplay
        '''</summary>
        Public Shared Function NameLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "NameLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Creates up to <var>count</var> instances an object and stores 
        '''them in the database.
        '''
        '''<p>If <var>verbose</var> is true, then details are echoed to the console.
        '''<p>If <var>DeferIndices</var> is true, then indices are sorted at the end of the operation.
        '''<p>If <var>objects</var> is true, then each object that is created is returned in the objects array
        '''<p>If <var>tune</var> is true, then TuneTable^%apiSQL is called after the instances of the class have been created.
        '''
        '''<P>Returns the number of instances successfully created.
        '''
        '''<p>For more information refer to 
        '''<LINK href=DocBook.UI.Page.cls?KEY=GOBJ_populate>The Cach&eacute; Populate Utility</LINK>.
        '''</summary>
        Public Shared Function Populate(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal count As System.Nullable(Of Long), ByVal verbose As System.Nullable(Of Long), ByVal DeferIndices As System.Nullable(Of Long), ByRef objects As System.Nullable(Of Long), ByVal tune As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(count, false)
                    mtdSignature.Add(verbose, false)
                    mtdSignature.Add(DeferIndices, false)
                    mtdSignature.Add(objects, true)
                    mtdSignature.Add(tune, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "Populate", mtdSignature)
                    objects = CType(mtdSignature.Arguments(3),InterSystems.Data.CacheTypes.CacheIntArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Create a single instance of a serial object.
        '''</summary>
        Public Shared Function PopulateSerial(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "PopulateSerial", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''This is a system provided query that provides a result set containing every 
        '''instance within this extent.
        '''</summary>
        Public Shared Function Extent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheClient.CacheCommand
            Dim cmd As InterSystems.Data.CacheClient.CacheCommand = New InterSystems.Data.CacheClient.CacheCommand("{ call Sample.Car_Extent}", conn)
            Return cmd
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car)),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, timeout, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car)),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, timeout, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Car.ExistsIdInternal(conn, Sample.Car.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As InterSystems.Data.CacheTypes.CacheStatus
            Return Sample.Car.DeleteIdInternal(conn, Sample.Car.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheTypes.CacheStatus
            Return Sample.Car.KillExtentInternal(conn, Sample.Car.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Car.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Car.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Dim metaInfo As InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Car.ServerClassName)
            If metaInfo.Validate(Sample.Car.ClassCheckSum, Sample.Car.PropertyInfoColn, Sample.Car.CheckSumMethodDict, Sample.Car.CheckSumQueryDict, Sample.Car.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Sample.Car.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Car.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Car.AllPropertiesInfoColn
            End If
            Sample.Car.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Car.PropertyInfoColn)
            Return Sample.Car.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Car.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''This sample persistent class represents a person.<br>
    '''</summary>
    Partial Public Class Person
        Inherits InterSystems.Data.CacheTypes.CachePersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Person"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(53)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(2)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(8)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Person", GetType(Person))
            
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Age", 1, 0, 35645))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Car", 0, 0, 26653))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DOB", 7, 0, 49942))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("FavoriteColors", 0, 1, 45590))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Home", 0, 0, 33088))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", 4, 0, 8998))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Office", 0, 0, 33088))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Spouse", 0, 0, 57059))
            
            Sample.Person.CheckSumMethodDict.Add("%ComposeOid", 25785)
            Sample.Person.CheckSumMethodDict.Add("%DeleteExtent", 2558)
            Sample.Person.CheckSumMethodDict.Add("%IsA", 40977)
            Sample.Person.CheckSumMethodDict.Add("%SaveIndices", 30436)
            Sample.Person.CheckSumMethodDict.Add("Addition", 51540)
            Sample.Person.CheckSumMethodDict.Add("AgeDisplayToLogical", 20538)
            Sample.Person.CheckSumMethodDict.Add("AgeIsValid", 4756)
            Sample.Person.CheckSumMethodDict.Add("AgeLogicalToDisplay", 26184)
            Sample.Person.CheckSumMethodDict.Add("CarGetObject", 44394)
            Sample.Person.CheckSumMethodDict.Add("CarGetObjectId", 4555)
            Sample.Person.CheckSumMethodDict.Add("CarIsValid", 30030)
            Sample.Person.CheckSumMethodDict.Add("CarSetObject", 15000)
            Sample.Person.CheckSumMethodDict.Add("CarSetObjectId", 27957)
            Sample.Person.CheckSumMethodDict.Add("DOBDisplayToLogical", 15751)
            Sample.Person.CheckSumMethodDict.Add("DOBIsValid", 4756)
            Sample.Person.CheckSumMethodDict.Add("DOBLogicalToDisplay", 21196)
            Sample.Person.CheckSumMethodDict.Add("FavoriteColorsDisplayToLogical", 59650)
            Sample.Person.CheckSumMethodDict.Add("FavoriteColorsGetObject", 44394)
            Sample.Person.CheckSumMethodDict.Add("FavoriteColorsGetObjectId", 4555)
            Sample.Person.CheckSumMethodDict.Add("FavoriteColorsIsValid", 4756)
            Sample.Person.CheckSumMethodDict.Add("FavoriteColorsLogicalToDisplay", 59650)
            Sample.Person.CheckSumMethodDict.Add("HomeGetObject", 44394)
            Sample.Person.CheckSumMethodDict.Add("HomeGetObjectId", 4555)
            Sample.Person.CheckSumMethodDict.Add("HomeIsValid", 30030)
            Sample.Person.CheckSumMethodDict.Add("HomeSetObject", 15000)
            Sample.Person.CheckSumMethodDict.Add("HomeSetObjectId", 27957)
            Sample.Person.CheckSumMethodDict.Add("IDKEYDelete", 46328)
            Sample.Person.CheckSumMethodDict.Add("IDKEYExists", 13237)
            Sample.Person.CheckSumMethodDict.Add("IDKEYOpen", 7502)
            Sample.Person.CheckSumMethodDict.Add("NameDisplayToLogical", 54969)
            Sample.Person.CheckSumMethodDict.Add("NameIDXExists", 27132)
            Sample.Person.CheckSumMethodDict.Add("NameIsValid", 4756)
            Sample.Person.CheckSumMethodDict.Add("NameLogicalToDisplay", 6915)
            Sample.Person.CheckSumMethodDict.Add("NameLogicalToODBC", 6915)
            Sample.Person.CheckSumMethodDict.Add("NameODBCToLogical", 54969)
            Sample.Person.CheckSumMethodDict.Add("NinetyNine", 5360)
            Sample.Person.CheckSumMethodDict.Add("OfficeGetObject", 44394)
            Sample.Person.CheckSumMethodDict.Add("OfficeGetObjectId", 4555)
            Sample.Person.CheckSumMethodDict.Add("OfficeIsValid", 30030)
            Sample.Person.CheckSumMethodDict.Add("OfficeSetObject", 15000)
            Sample.Person.CheckSumMethodDict.Add("OfficeSetObjectId", 27957)
            Sample.Person.CheckSumMethodDict.Add("Populate", 60597)
            Sample.Person.CheckSumMethodDict.Add("PopulateSerial", 28057)
            Sample.Person.CheckSumMethodDict.Add("PrintPerson", 6932)
            Sample.Person.CheckSumMethodDict.Add("PrintPersons", 56133)
            Sample.Person.CheckSumMethodDict.Add("PrintPersonsSQL", 56133)
            Sample.Person.CheckSumMethodDict.Add("SpouseGetObject", 44394)
            Sample.Person.CheckSumMethodDict.Add("SpouseGetObjectId", 4555)
            Sample.Person.CheckSumMethodDict.Add("SpouseIsValid", 30030)
            Sample.Person.CheckSumMethodDict.Add("SpouseSetObject", 15000)
            Sample.Person.CheckSumMethodDict.Add("SpouseSetObjectId", 27957)
            Sample.Person.CheckSumMethodDict.Add("StoredProcTest", 65040)
            Sample.Person.CheckSumMethodDict.Add("UpdateProcTest", 29231)
            
            Sample.Person.CheckSumQueryDict.Add("ByName", 16223)
            Sample.Person.CheckSumQueryDict.Add("Extent", 58958)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal arg As String)
            MyBase.New
            Try 
                System.Threading.Monitor.Enter(conn)
                Me.Init(conn, Sample.Person.ServerClassName, arg)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            MyBase.New
            Try 
                System.Threading.Monitor.Enter(conn)
                Me.Init(conn, Sample.Person.ServerClassName)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Person's age.<br>
        '''This is a calculated field whose value is derived from <property>DOB</property>.
        '''</summary>
        Public Overridable ReadOnly Property Age() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 1)
                        Me.GetPropertyS("Age", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
        End Property
        
        '''<summary>
        '''Person's car. This is a reference to another persistent object.
        '''</summary>
        Public Overridable Property Car() As Sample.Car
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Car))
                        Me.GetPropertyS("Car", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Car)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Car", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's Date of Birth.
        '''</summary>
        Public Overridable Property DOB() As InterSystems.Data.CacheTypes.CacheDate
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 7)
                        Me.GetPropertyS("DOB", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheDateReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, 7, false)
                        Me.SetPropertyS("DOB", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''A collection of strings representing the person's favorite colors.
        '''</summary>
        Public Overridable Property FavoriteColors() As InterSystems.Data.CacheTypes.CacheListOfStrings
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 1, 4)
                        Me.GetPropertyS("FavoriteColors", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,InterSystems.Data.CacheTypes.CacheListOfStrings)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("FavoriteColors", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's home address. This uses an embedded object.
        '''</summary>
        Public Overridable Property Home() As Sample.Address1
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Address1))
                        Me.GetPropertyS("Home", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Address1)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Home", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's name.
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 4)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's office address. This uses an embedded object.
        '''</summary>
        Public Overridable Property Office() As Sample.Address1
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Address1))
                        Me.GetPropertyS("Office", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Address1)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Office", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's spouse. This is a reference to another persistent object.
        '''</summary>
        Public Overridable Property Spouse() As Sample.Person
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Person))
                        Me.GetPropertyS("Spouse", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Person)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Spouse", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''%ComposeOid()
        '''
        '''		This class method accepts an ID and returns a fully qualified OID, containing the most specific type class of the object identified by the
        '''		<var>id</var> argument. If default storage is used then the %%CLASSNAME value is used to determine the most specific type class, otherwise call
        '''		%OnDetermineClass to determine the most specific type class. If neither case is true then the current class is
        '''		used. If there is a problem determining the most specific type class then null ("") is returned.
        '''</summary>
        Public Shared Sub SysComposeOid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, -1)
                    mtdSignature.Add(id, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "%ComposeOid", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Delete all instances of this class from its extent. On exit <var>instancecount</var> 
        '''contains the original number of instances while <var>deletecount</var> contains 
        '''the number of instances actually deleted.
        '''
        '''<p>Internally, <METHOD>%DeleteExtent</METHOD> iterates over the set of instances in the 
        '''collection and invokes the <METHOD>%Delete</METHOD> method.
        '''
        '''Refer to <LINK href=/AboutConcurrency.html>About Concurrency</LINK> for more details 
        '''on the optional <var>concurrency</var> argument.
        '''
        '''<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        '''</summary>
        Public Shared Function SysDeleteExtent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal concurrency As System.Nullable(Of Long), ByRef deletecount As String, ByRef instancecount As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(deletecount, true)
                    mtdSignature.Add(instancecount, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "%DeleteExtent", mtdSignature)
                    deletecount = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    instancecount = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns true (1) if instances of this class are also instances of the isclass parameter.
        '''That is 'isclass' is a primary superclass of this object.
        '''</summary>
        Public Shared Function SysIsA(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal isclass As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(isclass, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "%IsA", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Files the indices for all objects whose ID is in the range defined by <var>pStartId</var> and <var>pEndId</var>.
        '''If <var>pEndId</var> is null then it defaults to <var>pStartId</var>. If <var>pStartId</var> is null then the
        '''range is empty and no filing will occur.
        '''
        '''If <var>lockExtent</var> is true then an extent lock will be acquired before the indices
        '''are built. If the lock cannot be acquired then an error is returned. The lock is released
        '''after the index filing is completed.
        '''
        '''
        '''
        '''<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        '''</summary>
        Public Shared Function SysSaveIndices(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal pStartId As String, ByVal pEndId As String, ByVal lockExtent As System.Nullable(Of Boolean)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(pStartId, false)
                    mtdSignature.Add(pEndId, false)
                    mtdSignature.Add(lockExtent, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "%SaveIndices", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''A simple, sample method: add two numbers (<var>x</var> and <var>y</var>) 
        '''and return the result.
        '''</summary>
        Public Overridable Function Addition(ByVal x As System.Nullable(Of Long), ByVal y As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 1)
                    mtdSignature.Add(x, false)
                    mtdSignature.Add(y, false)
                    Me.RunMethodS("Addition", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method AgeDisplayToLogical
        '''</summary>
        Public Shared Function AgeDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "AgeDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method AgeIsValid
        '''</summary>
        Public Shared Function AgeIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "AgeIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method AgeLogicalToDisplay
        '''</summary>
        Public Shared Function AgeLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "AgeLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CarGetObject
        '''</summary>
        Public Overridable Function CarGetObject(ByVal force As System.Nullable(Of Long)) As Byte()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 3)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("CarGetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBinaryReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CarGetObjectId
        '''</summary>
        Public Overridable Function CarGetObjectId(ByVal force As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 4)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("CarGetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CarIsValid
        '''</summary>
        Public Shared Function CarIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal value As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(value, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "CarIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CarSetObject
        '''</summary>
        Public Overridable Function CarSetObject(ByVal newvalue() As Byte) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newvalue, false)
                    Me.RunMethodS("CarSetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CarSetObjectId
        '''</summary>
        Public Overridable Function CarSetObjectId(ByVal newid As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newid, false)
                    Me.RunMethodS("CarSetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method DOBDisplayToLogical
        '''</summary>
        Public Shared Function DOBDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheDate
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 7)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "DOBDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheDateReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method DOBIsValid
        '''</summary>
        Public Shared Function DOBIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "DOBIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method DOBLogicalToDisplay
        '''</summary>
        Public Shared Function DOBLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As InterSystems.Data.CacheTypes.CacheDate) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, 7, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "DOBLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method FavoriteColorsDisplayToLogical
        '''</summary>
        Public Shared Function FavoriteColorsDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "FavoriteColorsDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method FavoriteColorsGetObject
        '''</summary>
        Public Overridable Function FavoriteColorsGetObject(ByVal force As System.Nullable(Of Long)) As Byte()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 3)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("FavoriteColorsGetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBinaryReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method FavoriteColorsGetObjectId
        '''</summary>
        Public Overridable Function FavoriteColorsGetObjectId(ByVal force As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 4)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("FavoriteColorsGetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method FavoriteColorsIsValid
        '''</summary>
        Public Shared Function FavoriteColorsIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "FavoriteColorsIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method FavoriteColorsLogicalToDisplay
        '''</summary>
        Public Shared Function FavoriteColorsLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "FavoriteColorsLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method HomeGetObject
        '''</summary>
        Public Overridable Function HomeGetObject(ByVal force As System.Nullable(Of Long)) As Byte()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 3)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("HomeGetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBinaryReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method HomeGetObjectId
        '''</summary>
        Public Overridable Function HomeGetObjectId(ByVal force As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 4)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("HomeGetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method HomeIsValid
        '''</summary>
        Public Shared Function HomeIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal value As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(value, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "HomeIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method HomeSetObject
        '''</summary>
        Public Overridable Function HomeSetObject(ByVal newvalue() As Byte) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newvalue, false)
                    Me.RunMethodS("HomeSetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method HomeSetObjectId
        '''</summary>
        Public Overridable Function HomeSetObjectId(ByVal newid As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newid, false)
                    Me.RunMethodS("HomeSetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 9)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Person))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Person)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameDisplayToLogical
        '''</summary>
        Public Shared Function NameDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameIDXExists
        '''</summary>
        Public Shared Function NameIDXExists(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 9)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameIDXExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameIsValid
        '''</summary>
        Public Shared Function NameIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameLogicalToDisplay
        '''</summary>
        Public Shared Function NameLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameLogicalToODBC
        '''</summary>
        Public Shared Function NameLogicalToODBC(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameLogicalToODBC", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameODBCToLogical
        '''</summary>
        Public Shared Function NameODBCToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameODBCToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''A simple, sample expression method: returns the value 99.
        '''</summary>
        Public Overridable Function NinetyNine() As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 1)
                    Me.RunMethodS("NinetyNine", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OfficeGetObject
        '''</summary>
        Public Overridable Function OfficeGetObject(ByVal force As System.Nullable(Of Long)) As Byte()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 3)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("OfficeGetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBinaryReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OfficeGetObjectId
        '''</summary>
        Public Overridable Function OfficeGetObjectId(ByVal force As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 4)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("OfficeGetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OfficeIsValid
        '''</summary>
        Public Shared Function OfficeIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal value As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(value, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "OfficeIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OfficeSetObject
        '''</summary>
        Public Overridable Function OfficeSetObject(ByVal newvalue() As Byte) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newvalue, false)
                    Me.RunMethodS("OfficeSetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OfficeSetObjectId
        '''</summary>
        Public Overridable Function OfficeSetObjectId(ByVal newid As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newid, false)
                    Me.RunMethodS("OfficeSetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Creates up to <var>count</var> instances an object and stores 
        '''them in the database.
        '''
        '''<p>If <var>verbose</var> is true, then details are echoed to the console.
        '''<p>If <var>DeferIndices</var> is true, then indices are sorted at the end of the operation.
        '''<p>If <var>objects</var> is true, then each object that is created is returned in the objects array
        '''<p>If <var>tune</var> is true, then TuneTable^%apiSQL is called after the instances of the class have been created.
        '''
        '''<P>Returns the number of instances successfully created.
        '''
        '''<p>For more information refer to 
        '''<LINK href=DocBook.UI.Page.cls?KEY=GOBJ_populate>The Cach&eacute; Populate Utility</LINK>.
        '''</summary>
        Public Shared Function Populate(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal count As System.Nullable(Of Long), ByVal verbose As System.Nullable(Of Long), ByVal DeferIndices As System.Nullable(Of Long), ByRef objects As System.Nullable(Of Long), ByVal tune As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(count, false)
                    mtdSignature.Add(verbose, false)
                    mtdSignature.Add(DeferIndices, false)
                    mtdSignature.Add(objects, true)
                    mtdSignature.Add(tune, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "Populate", mtdSignature)
                    objects = CType(mtdSignature.Arguments(3),InterSystems.Data.CacheTypes.CacheIntArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Create a single instance of a serial object.
        '''</summary>
        Public Shared Function PopulateSerial(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "PopulateSerial", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Prints the property <property>Name</property> to the console.
        '''</summary>
        Public Overridable Sub PrintPerson()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, -1)
                    Me.RunMethodS("PrintPerson", mtdSignature)
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Sub
        
        '''<summary>
        '''Invoke the <method>PrintPerson</method> on all <class>Person</class> objects 
        '''within the database.
        '''</summary>
        Public Shared Sub PrintPersons(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, -1)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "PrintPersons", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Prints out data on all persons within the database using SQL to 
        '''iterate over all the person data.
        '''</summary>
        Public Shared Sub PrintPersonsSQL(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, -1)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "PrintPersonsSQL", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Projection of method SpouseGetObject
        '''</summary>
        Public Overridable Function SpouseGetObject(ByVal force As System.Nullable(Of Long)) As Byte()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 3)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("SpouseGetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBinaryReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method SpouseGetObjectId
        '''</summary>
        Public Overridable Function SpouseGetObjectId(ByVal force As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 4)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("SpouseGetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method SpouseIsValid
        '''</summary>
        Public Shared Function SpouseIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal value As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(value, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "SpouseIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method SpouseSetObject
        '''</summary>
        Public Overridable Function SpouseSetObject(ByVal newvalue() As Byte) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newvalue, false)
                    Me.RunMethodS("SpouseSetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method SpouseSetObjectId
        '''</summary>
        Public Overridable Function SpouseSetObjectId(ByVal newid As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newid, false)
                    Me.RunMethodS("SpouseSetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''This is a sample of how to define an SQL stored procedure using a 
        '''class method. This method can be called as a stored procedure via 
        '''ODBC or JDBC.<br>
        '''In this case this method returns the concatenation of a string value.
        '''</summary>
        Public Shared Function StoredProcTest(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal name As String, ByRef response As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(name, false)
                    mtdSignature.Add(response, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "StoredProcTest", mtdSignature)
                    response = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''This is a sample of how to define an SQL stored procedure using a 
        '''class method. This method can be called as a stored procedure via 
        '''ODBC or JDBC.<br>
        '''This method performs an SQL update operation on the database 
        '''using embedded SQL. The update modifies the embedded properties 
        '''<var>Home.City</var> and <var>Home.State</var> for all rows whose 
        '''<var>Home.Zip</var> is equal to <var>zip</zip>.
        '''</summary>
        Public Shared Function UpdateProcTest(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal zip As String, ByVal city As String, ByVal state As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(zip, false)
                    mtdSignature.Add(city, false)
                    mtdSignature.Add(state, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "UpdateProcTest", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''A sample class query that defines a result set that returns Person data 
        '''ordered by <property>Name</property>.<br>
        '''This query can be used within another Cach&eacute; method (using the
        '''<class>%ResultSet</class> class), from Java, or from ActiveX.<br>
        '''This query is also accessible from ODBC and/or JDBC as the SQL stored procedure 
        '''<b>SP_Sample_By_Name</b>.
        '''</summary>
        Public Shared Function ByName(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheClient.CacheCommand
            Dim cmd As InterSystems.Data.CacheClient.CacheCommand = New InterSystems.Data.CacheClient.CacheCommand("{ call Sample.SP_Sample_By_Name(?)}", conn)
            Return cmd
        End Function
        
        '''<summary>
        '''This is a system provided query that provides a result set containing every 
        '''instance within this extent.
        '''</summary>
        Public Shared Function Extent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheClient.CacheCommand
            Dim cmd As InterSystems.Data.CacheClient.CacheCommand = New InterSystems.Data.CacheClient.CacheCommand("{ call Sample.Person_Extent}", conn)
            Return cmd
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person)),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person)),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Person.ExistsIdInternal(conn, Sample.Person.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As InterSystems.Data.CacheTypes.CacheStatus
            Return Sample.Person.DeleteIdInternal(conn, Sample.Person.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheTypes.CacheStatus
            Return Sample.Person.KillExtentInternal(conn, Sample.Person.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Person.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Person.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Dim metaInfo As InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Person.ServerClassName)
            If metaInfo.Validate(Sample.Person.ClassCheckSum, Sample.Person.PropertyInfoColn, Sample.Person.CheckSumMethodDict, Sample.Person.CheckSumQueryDict, Sample.Person.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Sample.Person.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Person.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Person.AllPropertiesInfoColn
            End If
            Sample.Person.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Person.PropertyInfoColn)
            Return Sample.Person.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Person.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Supplier
    '''</summary>
    Partial Public Class Supplier
        Inherits InterSystems.Data.CacheTypes.CachePersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Supplier"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(17)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(2)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Sample.Supplier", GetType(Supplier))
            
            Sample.Supplier.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Address", 0, 0, 33088))
            Sample.Supplier.PropertyInfoColn.Add(New InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Name", 4, 0, 1518))
            
            Sample.Supplier.CheckSumMethodDict.Add("%ComposeOid", 25785)
            Sample.Supplier.CheckSumMethodDict.Add("%DeleteExtent", 2558)
            Sample.Supplier.CheckSumMethodDict.Add("%IsA", 40977)
            Sample.Supplier.CheckSumMethodDict.Add("%SaveIndices", 30436)
            Sample.Supplier.CheckSumMethodDict.Add("AddressGetObject", 44394)
            Sample.Supplier.CheckSumMethodDict.Add("AddressGetObjectId", 4555)
            Sample.Supplier.CheckSumMethodDict.Add("AddressIsValid", 30030)
            Sample.Supplier.CheckSumMethodDict.Add("AddressSetObject", 15000)
            Sample.Supplier.CheckSumMethodDict.Add("AddressSetObjectId", 27957)
            Sample.Supplier.CheckSumMethodDict.Add("IDKEYDelete", 46328)
            Sample.Supplier.CheckSumMethodDict.Add("IDKEYExists", 13237)
            Sample.Supplier.CheckSumMethodDict.Add("IDKEYOpen", 57177)
            Sample.Supplier.CheckSumMethodDict.Add("NameDisplayToLogical", 59650)
            Sample.Supplier.CheckSumMethodDict.Add("NameIsValid", 4756)
            Sample.Supplier.CheckSumMethodDict.Add("NameLogicalToDisplay", 59650)
            Sample.Supplier.CheckSumMethodDict.Add("Populate", 60597)
            Sample.Supplier.CheckSumMethodDict.Add("PopulateSerial", 28057)
            
            Sample.Supplier.CheckSumQueryDict.Add("Extent", 49364)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal arg As String)
            MyBase.New
            Try 
                System.Threading.Monitor.Enter(conn)
                Me.Init(conn, Sample.Supplier.ServerClassName, arg)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            MyBase.New
            Try 
                System.Threading.Monitor.Enter(conn)
                Me.Init(conn, Sample.Supplier.ServerClassName)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Projection of property Address
        '''</summary>
        Public Overridable Property Address() As Sample.Address1
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Address1))
                        Me.GetPropertyS("Address", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Address1)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Address", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Name
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, 4)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''%ComposeOid()
        '''
        '''		This class method accepts an ID and returns a fully qualified OID, containing the most specific type class of the object identified by the
        '''		<var>id</var> argument. If default storage is used then the %%CLASSNAME value is used to determine the most specific type class, otherwise call
        '''		%OnDetermineClass to determine the most specific type class. If neither case is true then the current class is
        '''		used. If there is a problem determining the most specific type class then null ("") is returned.
        '''</summary>
        Public Shared Sub SysComposeOid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, -1)
                    mtdSignature.Add(id, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "%ComposeOid", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Delete all instances of this class from its extent. On exit <var>instancecount</var> 
        '''contains the original number of instances while <var>deletecount</var> contains 
        '''the number of instances actually deleted.
        '''
        '''<p>Internally, <METHOD>%DeleteExtent</METHOD> iterates over the set of instances in the 
        '''collection and invokes the <METHOD>%Delete</METHOD> method.
        '''
        '''Refer to <LINK href=/AboutConcurrency.html>About Concurrency</LINK> for more details 
        '''on the optional <var>concurrency</var> argument.
        '''
        '''<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        '''</summary>
        Public Shared Function SysDeleteExtent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal concurrency As System.Nullable(Of Long), ByRef deletecount As String, ByRef instancecount As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(deletecount, true)
                    mtdSignature.Add(instancecount, true)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "%DeleteExtent", mtdSignature)
                    deletecount = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    instancecount = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns true (1) if instances of this class are also instances of the isclass parameter.
        '''That is 'isclass' is a primary superclass of this object.
        '''</summary>
        Public Shared Function SysIsA(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal isclass As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(isclass, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "%IsA", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Files the indices for all objects whose ID is in the range defined by <var>pStartId</var> and <var>pEndId</var>.
        '''If <var>pEndId</var> is null then it defaults to <var>pStartId</var>. If <var>pStartId</var> is null then the
        '''range is empty and no filing will occur.
        '''
        '''If <var>lockExtent</var> is true then an extent lock will be acquired before the indices
        '''are built. If the lock cannot be acquired then an error is returned. The lock is released
        '''after the index filing is completed.
        '''
        '''
        '''
        '''<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.
        '''</summary>
        Public Shared Function SysSaveIndices(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal pStartId As String, ByVal pEndId As String, ByVal lockExtent As System.Nullable(Of Boolean)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(pStartId, false)
                    mtdSignature.Add(pEndId, false)
                    mtdSignature.Add(lockExtent, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "%SaveIndices", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method AddressGetObject
        '''</summary>
        Public Overridable Function AddressGetObject(ByVal force As System.Nullable(Of Long)) As Byte()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 3)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("AddressGetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBinaryReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method AddressGetObjectId
        '''</summary>
        Public Overridable Function AddressGetObjectId(ByVal force As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 4)
                    mtdSignature.Add(force, false)
                    Me.RunMethodS("AddressGetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method AddressIsValid
        '''</summary>
        Public Shared Function AddressIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal value As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(value, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "AddressIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method AddressSetObject
        '''</summary>
        Public Overridable Function AddressSetObject(ByVal newvalue() As Byte) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newvalue, false)
                    Me.RunMethodS("AddressSetObject", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method AddressSetObjectId
        '''</summary>
        Public Overridable Function AddressSetObjectId(ByVal newid As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, 5)
                    mtdSignature.Add(newid, false)
                    Me.RunMethodS("AddressSetObjectId", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 9)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.CacheTypes.CacheStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Supplier))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.CacheTypes.CacheStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheObjReturnValue).Value,Sample.Supplier)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameDisplayToLogical
        '''</summary>
        Public Shared Function NameDisplayToLogical(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "NameDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameIsValid
        '''</summary>
        Public Shared Function NameIsValid(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As InterSystems.Data.CacheTypes.CacheStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 5)
                    mtdSignature.Add(_argument1, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "NameIsValid", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameLogicalToDisplay
        '''</summary>
        Public Shared Function NameLogicalToDisplay(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    mtdSignature.Add(_argument1, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "NameLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Creates up to <var>count</var> instances an object and stores 
        '''them in the database.
        '''
        '''<p>If <var>verbose</var> is true, then details are echoed to the console.
        '''<p>If <var>DeferIndices</var> is true, then indices are sorted at the end of the operation.
        '''<p>If <var>objects</var> is true, then each object that is created is returned in the objects array
        '''<p>If <var>tune</var> is true, then TuneTable^%apiSQL is called after the instances of the class have been created.
        '''
        '''<P>Returns the number of instances successfully created.
        '''
        '''<p>For more information refer to 
        '''<LINK href=DocBook.UI.Page.cls?KEY=GOBJ_populate>The Cach&eacute; Populate Utility</LINK>.
        '''</summary>
        Public Shared Function Populate(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal count As System.Nullable(Of Long), ByVal verbose As System.Nullable(Of Long), ByVal DeferIndices As System.Nullable(Of Long), ByRef objects As System.Nullable(Of Long), ByVal tune As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 1)
                    mtdSignature.Add(count, false)
                    mtdSignature.Add(verbose, false)
                    mtdSignature.Add(DeferIndices, false)
                    mtdSignature.Add(objects, true)
                    mtdSignature.Add(tune, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "Populate", mtdSignature)
                    objects = CType(mtdSignature.Arguments(3),InterSystems.Data.CacheTypes.CacheIntArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Create a single instance of a serial object.
        '''</summary>
        Public Shared Function PopulateSerial(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.CacheTypes.CacheMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, 4)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "PopulateSerial", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.CacheTypes.CacheStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''This is a system provided query that provides a result set containing every 
        '''instance within this extent.
        '''</summary>
        Public Shared Function Extent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheClient.CacheCommand
            Dim cmd As InterSystems.Data.CacheClient.CacheCommand = New InterSystems.Data.CacheClient.CacheCommand("{ call Sample.Supplier_Extent}", conn)
            Return cmd
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier)),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, timeout, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier)),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.CacheTypes.CacheStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, timeout, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Supplier.ExistsIdInternal(conn, Sample.Supplier.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.CacheClient.CacheConnection, ByVal id As String) As InterSystems.Data.CacheTypes.CacheStatus
            Return Sample.Supplier.DeleteIdInternal(conn, Sample.Supplier.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.CacheClient.CacheConnection) As InterSystems.Data.CacheTypes.CacheStatus
            Return Sample.Supplier.KillExtentInternal(conn, Sample.Supplier.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Supplier.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Supplier.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Dim metaInfo As InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Supplier.ServerClassName)
            If metaInfo.Validate(Sample.Supplier.ClassCheckSum, Sample.Supplier.PropertyInfoColn, Sample.Supplier.CheckSumMethodDict, Sample.Supplier.CheckSumQueryDict, Sample.Supplier.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.CacheClient.CacheConnection)
            Sample.Supplier.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Supplier.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Supplier.AllPropertiesInfoColn
            End If
            Sample.Supplier.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Supplier.PropertyInfoColn)
            Return Sample.Supplier.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Supplier.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace
