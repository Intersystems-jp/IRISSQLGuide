'------------------------------------------------------------------------------
' IRISProvider version: 2024.2.0.999
'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:4.0.30319.42000
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Accesary
    '''</summary>
    Partial Public Class Accesary
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Accesary"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(30)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(3)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Accesary", GetType(Accesary))
            
            Sample.Accesary.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Madeof", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Accesary.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Accesary.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Price", InterSystems.Data.IRISTypes.ClientTypeId.tInt, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 30524))
            
            Sample.Accesary.CheckSumMethodDict.Add("CreateAll", 60983)
            Sample.Accesary.CheckSumMethodDict.Add("DestroyAll", 56133)
            Sample.Accesary.CheckSumMethodDict.Add("IDKEYDelete", 60615)
            Sample.Accesary.CheckSumMethodDict.Add("IDKEYExists", 9133)
            Sample.Accesary.CheckSumMethodDict.Add("IDKEYOpen", 25839)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Accesary.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Accesary.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Madeof
        '''</summary>
        Public Overridable Property Madeof() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Madeof", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Madeof", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Name
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Price
        '''</summary>
        Public Overridable Property Price() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                        Me.GetPropertyS("Price", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Price", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Sample.Accesary、Sample.Jewel、Sample.Watch　の自動生成
        '''</summary>
        Public Shared Sub CreateAll(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal n As String)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    mtdSignature.Add(n, false)
                    Sample.Accesary.RunClassMethodS(conn, Sample.Accesary.ServerClassName, "CreateAll", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Sample.Accesary、Sample.Jewel、Sample.Watch　の一括削除
        '''</summary>
        Public Shared Sub DestroyAll(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Accesary.RunClassMethodS(conn, Sample.Accesary.ServerClassName, "DestroyAll", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Accesary.RunClassMethodS(conn, Sample.Accesary.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Accesary.RunClassMethodS(conn, Sample.Accesary.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Accesary))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Accesary.RunClassMethodS(conn, Sample.Accesary.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Accesary)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, concurrency, GetType(Sample.Accesary), status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, GetType(Sample.Accesary), status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, GetType(Sample.Accesary)),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, concurrency, timeout, GetType(Sample.Accesary), status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, concurrency, GetType(Sample.Accesary), propertyPaths, status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, concurrency, timeout, GetType(Sample.Accesary), propertyPaths, status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, GetType(Sample.Accesary), propertyPaths),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, concurrency, GetType(Sample.Accesary), status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, GetType(Sample.Accesary), status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, GetType(Sample.Accesary)),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, concurrency, timeout, GetType(Sample.Accesary), status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, concurrency, GetType(Sample.Accesary), propertyPaths, status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, concurrency, timeout, GetType(Sample.Accesary), propertyPaths, status),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Accesary
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Accesary.ServerClassName, id, GetType(Sample.Accesary), propertyPaths),Sample.Accesary)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Accesary.ExistsIdInternal(conn, Sample.Accesary.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Accesary.DeleteIdInternal(conn, Sample.Accesary.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Accesary.KillExtentInternal(conn, Sample.Accesary.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Accesary.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Accesary.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Accesary.ServerClassName)
            If metaInfo.Validate(Sample.Accesary.ClassCheckSum, Sample.Accesary.PropertyInfoColn, Sample.Accesary.CheckSumMethodDict, Sample.Accesary.CheckSumQueryDict, Sample.Accesary.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Accesary.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Accesary.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Accesary.AllPropertiesInfoColn
            End If
            Sample.Accesary.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Accesary.PropertyInfoColn)
            Return Sample.Accesary.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Accesary.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''This is a sample embeddable class representing an address.
    '''</summary>
    Partial Public Class Address1
        Inherits InterSystems.Data.IRISTypes.IRISSerialObject
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Address1"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 51887
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(25)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(0)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(4)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Address1", GetType(Address1))
            
            Sample.Address1.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("City", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Address1.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("State", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Address1.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Street", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Address1.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Zip", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            
            Sample.Address1.CheckSumMethodDict.Add("%Delete", 286)
            Sample.Address1.CheckSumMethodDict.Add("%Open", 29934)
            Sample.Address1.CheckSumMethodDict.Add("OnPopulate", 6533)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Address1.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Address1.ServerClassName)
        End Sub
        
        '''<summary>
        '''The city name.
        '''</summary>
        Public Overridable Property City() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("City", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("City", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''State(Province)
        '''</summary>
        Public Overridable Property State() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("State", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("State", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''The street address.
        '''</summary>
        Public Overridable Property Street() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Street", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Street", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''The 5-digit U.S. Zone Improvement Plan (ZIP) code.
        '''</summary>
        Public Overridable Property Zip() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Zip", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Zip", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method %Delete
        '''</summary>
        Public Shared Function SysDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal oid() As Byte, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(oid, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "%Delete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method %Open
        '''</summary>
        Public Shared Function SysOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal initvalue() As Byte, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As InterSystems.Data.IRISTypes.IRISObject
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(InterSystems.Data.IRISTypes.IRISObject))
                    mtdSignature.Add(initvalue, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Address1.RunClassMethodS(conn, Sample.Address1.ServerClassName, "%Open", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,InterSystems.Data.IRISTypes.IRISObject)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OnPopulate
        '''</summary>
        Public Overridable Function OnPopulate() As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    Me.RunMethodS("OnPopulate", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Address1.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Address1.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Address1.ServerClassName)
            If metaInfo.Validate(Sample.Address1.ClassCheckSum, Sample.Address1.PropertyInfoColn, Sample.Address1.CheckSumMethodDict, Sample.Address1.CheckSumQueryDict, Sample.Address1.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Address1.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Address1.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Address1.AllPropertiesInfoColn
            End If
            Sample.Address1.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Address1.PropertyInfoColn)
            Return Sample.Address1.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Address1.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Address2
    '''</summary>
    Partial Public Class Address2
        Inherits InterSystems.Data.IRISTypes.IRISSerialObject
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Address2"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 51887
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(25)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(0)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(4)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Address2", GetType(Address2))
            
            Sample.Address2.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("City", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Address2.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Pref", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Address2.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Street", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Address2.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Zip", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            
            Sample.Address2.CheckSumMethodDict.Add("%Delete", 286)
            Sample.Address2.CheckSumMethodDict.Add("%Open", 29934)
            Sample.Address2.CheckSumMethodDict.Add("OnPopulate", 6533)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Address2.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Address2.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property City
        '''</summary>
        Public Overridable Property City() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("City", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("City", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Pref
        '''</summary>
        Public Overridable Property Pref() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Pref", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Pref", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Street
        '''</summary>
        Public Overridable Property Street() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Street", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Street", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Zip
        '''</summary>
        Public Overridable Property Zip() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Zip", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Zip", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method %Delete
        '''</summary>
        Public Shared Function SysDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal oid() As Byte, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(oid, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Address2.RunClassMethodS(conn, Sample.Address2.ServerClassName, "%Delete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method %Open
        '''</summary>
        Public Shared Function SysOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal initvalue() As Byte, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As InterSystems.Data.IRISTypes.IRISObject
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(InterSystems.Data.IRISTypes.IRISObject))
                    mtdSignature.Add(initvalue, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Address2.RunClassMethodS(conn, Sample.Address2.ServerClassName, "%Open", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,InterSystems.Data.IRISTypes.IRISObject)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method OnPopulate
        '''</summary>
        Public Overridable Function OnPopulate() As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    Me.RunMethodS("OnPopulate", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Address2.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Address2.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Address2.ServerClassName)
            If metaInfo.Validate(Sample.Address2.ClassCheckSum, Sample.Address2.PropertyInfoColn, Sample.Address2.CheckSumMethodDict, Sample.Address2.CheckSumQueryDict, Sample.Address2.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Address2.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Address2.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Address2.AllPropertiesInfoColn
            End If
            Sample.Address2.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Address2.PropertyInfoColn)
            Return Sample.Address2.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Address2.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Car
    '''</summary>
    Partial Public Class Car
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Car"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(27)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(2)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Car", GetType(Car))
            
            Sample.Car.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Maker", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 58102))
            Sample.Car.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            
            Sample.Car.CheckSumMethodDict.Add("IDKEYDelete", 60615)
            Sample.Car.CheckSumMethodDict.Add("IDKEYExists", 9133)
            Sample.Car.CheckSumMethodDict.Add("IDKEYOpen", 36269)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Car.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Car.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Maker
        '''</summary>
        Public Overridable Property Maker() As Sample.Supplier
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Supplier))
                        Me.GetPropertyS("Maker", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Supplier)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Maker", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Name
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Car))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Car.RunClassMethodS(conn, Sample.Car.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Car)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car)),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, timeout, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, GetType(Sample.Car), propertyPaths, status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, timeout, GetType(Sample.Car), propertyPaths, status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car), propertyPaths),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car)),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, timeout, GetType(Sample.Car), status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, GetType(Sample.Car), propertyPaths, status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, concurrency, timeout, GetType(Sample.Car), propertyPaths, status),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Car
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Car.ServerClassName, id, GetType(Sample.Car), propertyPaths),Sample.Car)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Car.ExistsIdInternal(conn, Sample.Car.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Car.DeleteIdInternal(conn, Sample.Car.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Car.KillExtentInternal(conn, Sample.Car.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Car.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Car.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Car.ServerClassName)
            If metaInfo.Validate(Sample.Car.ClassCheckSum, Sample.Car.PropertyInfoColn, Sample.Car.CheckSumMethodDict, Sample.Car.CheckSumQueryDict, Sample.Car.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Car.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Car.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Car.AllPropertiesInfoColn
            End If
            Sample.Car.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Car.PropertyInfoColn)
            Return Sample.Car.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Car.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Customer
    '''</summary>
    Partial Public Class Customer
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Customer"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(32)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(3)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Customer", GetType(Customer))
            
            Sample.Customer.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Address1", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 37888))
            Sample.Customer.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Customer.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Telno", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            
            Sample.Customer.CheckSumMethodDict.Add("IDKEYDelete", 60615)
            Sample.Customer.CheckSumMethodDict.Add("IDKEYExists", 9133)
            Sample.Customer.CheckSumMethodDict.Add("IDKEYOpen", 44763)
            Sample.Customer.CheckSumMethodDict.Add("NameIndexExists", 10116)
            Sample.Customer.CheckSumMethodDict.Add("TelnoIndexExists", 10116)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Customer.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Customer.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Address1
        '''</summary>
        Public Overridable Property Address1() As Sample.Address2
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Address2))
                        Me.GetPropertyS("Address1", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Address2)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Address1", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Name
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Telno
        '''</summary>
        Public Overridable Property Telno() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Telno", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Telno", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Customer))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Customer)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameIndexExists
        '''</summary>
        Public Shared Function NameIndexExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "NameIndexExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method TelnoIndexExists
        '''</summary>
        Public Shared Function TelnoIndexExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Customer.RunClassMethodS(conn, Sample.Customer.ServerClassName, "TelnoIndexExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, concurrency, GetType(Sample.Customer), status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, GetType(Sample.Customer), status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, GetType(Sample.Customer)),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, concurrency, timeout, GetType(Sample.Customer), status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, concurrency, GetType(Sample.Customer), propertyPaths, status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, concurrency, timeout, GetType(Sample.Customer), propertyPaths, status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, GetType(Sample.Customer), propertyPaths),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, concurrency, GetType(Sample.Customer), status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, GetType(Sample.Customer), status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, GetType(Sample.Customer)),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, concurrency, timeout, GetType(Sample.Customer), status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, concurrency, GetType(Sample.Customer), propertyPaths, status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, concurrency, timeout, GetType(Sample.Customer), propertyPaths, status),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Customer
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Customer.ServerClassName, id, GetType(Sample.Customer), propertyPaths),Sample.Customer)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Customer.ExistsIdInternal(conn, Sample.Customer.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Customer.DeleteIdInternal(conn, Sample.Customer.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Customer.KillExtentInternal(conn, Sample.Customer.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Customer.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Customer.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Customer.ServerClassName)
            If metaInfo.Validate(Sample.Customer.ClassCheckSum, Sample.Customer.PropertyInfoColn, Sample.Customer.CheckSumMethodDict, Sample.Customer.CheckSumQueryDict, Sample.Customer.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Customer.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Customer.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Customer.AllPropertiesInfoColn
            End If
            Sample.Customer.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Customer.PropertyInfoColn)
            Return Sample.Customer.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Customer.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.JNAME
    '''</summary>
    Partial Public Class JNAME
        Inherits InterSystems.Data.IRISTypes.IRISSerialObject
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.JNAME"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 54465
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(0)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(0)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(0)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.JNAME.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.JNAME.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.JNAME.ServerClassName)
            If metaInfo.Validate(Sample.JNAME.ClassCheckSum, Sample.JNAME.PropertyInfoColn, Sample.JNAME.CheckSumMethodDict, Sample.JNAME.CheckSumQueryDict, Sample.JNAME.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.JNAME.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.JNAME.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.JNAME.AllPropertiesInfoColn
            End If
            Sample.JNAME.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.JNAME.PropertyInfoColn)
            Return Sample.JNAME.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.JNAME.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Jewel
    '''</summary>
    Partial Public Class Jewel
        Inherits Sample.Accesary
        
        '''<summary>Server class name</summary>
        Public Shadows Const ServerClassName As String = "Sample.Jewel"
        
        '''<summary>Meta information checksum</summary>
        Public Shadows Const ClassCheckSum As Long = 23631
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(24)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(1)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Jewel", GetType(Jewel))
            
            Sample.Jewel.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Material", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            
            Sample.Jewel.CheckSumMethodDict.Add("CreateAll", 12022)
            Sample.Jewel.CheckSumMethodDict.Add("DestroyAll", 7044)
            Sample.Jewel.CheckSumMethodDict.Add("IDKEYDelete", 11270)
            Sample.Jewel.CheckSumMethodDict.Add("IDKEYExists", 58220)
            Sample.Jewel.CheckSumMethodDict.Add("IDKEYOpen", 45210)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Jewel.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Jewel.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Material
        '''</summary>
        Public Overridable Property Material() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Material", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Material", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Sample.Accesary、Sample.Jewel、Sample.Watch　の自動生成
        '''</summary>
        Public Overloads Shared Sub CreateAll(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal n As String)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    mtdSignature.Add(n, false)
                    Sample.Jewel.RunClassMethodS(conn, Sample.Jewel.ServerClassName, "CreateAll", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Sample.Accesary、Sample.Jewel、Sample.Watch　の一括削除
        '''</summary>
        Public Overloads Shared Sub DestroyAll(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Jewel.RunClassMethodS(conn, Sample.Jewel.ServerClassName, "DestroyAll", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Overloads Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Jewel.RunClassMethodS(conn, Sample.Jewel.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Overloads Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Jewel.RunClassMethodS(conn, Sample.Jewel.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Overloads Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Jewel))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Jewel.RunClassMethodS(conn, Sample.Jewel.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Jewel)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, concurrency, GetType(Sample.Jewel), status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, GetType(Sample.Jewel), status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, GetType(Sample.Jewel)),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, concurrency, timeout, GetType(Sample.Jewel), status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, concurrency, GetType(Sample.Jewel), propertyPaths, status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, concurrency, timeout, GetType(Sample.Jewel), propertyPaths, status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, GetType(Sample.Jewel), propertyPaths),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, concurrency, GetType(Sample.Jewel), status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, GetType(Sample.Jewel), status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, GetType(Sample.Jewel)),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, concurrency, timeout, GetType(Sample.Jewel), status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, concurrency, GetType(Sample.Jewel), propertyPaths, status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, concurrency, timeout, GetType(Sample.Jewel), propertyPaths, status),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Jewel
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Jewel.ServerClassName, id, GetType(Sample.Jewel), propertyPaths),Sample.Jewel)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shadows Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Jewel.ExistsIdInternal(conn, Sample.Jewel.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shadows Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Jewel.DeleteIdInternal(conn, Sample.Jewel.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shadows Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Jewel.KillExtentInternal(conn, Sample.Jewel.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shadows Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Jewel.ServerClassName)
            Sample.Accesary.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Jewel.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shadows Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Jewel.ServerClassName)
            If metaInfo.Validate(Sample.Jewel.ClassCheckSum, Sample.Jewel.PropertyInfoColn, Sample.Jewel.CheckSumMethodDict, Sample.Jewel.CheckSumQueryDict, Sample.Jewel.GetAllPropertiesInfoColn) Then
                Return
            End If
            Sample.Accesary.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Jewel.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shadows Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Jewel.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Jewel.AllPropertiesInfoColn
            End If
            Sample.Jewel.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Jewel.PropertyInfoColn)
            Sample.Jewel.AllPropertiesInfoColn.InsertRange(Sample.Jewel.AllPropertiesInfoColn.Count, Sample.Accesary.GetAllPropertiesInfoColn)
            Return Sample.Jewel.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Jewel.ServerClassName
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Order
    '''</summary>
    Partial Public Class Order
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Order"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(32)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(4)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Order", GetType(Order))
            
            Sample.Order.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Customer1", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 29532))
            Sample.Order.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Items", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tRelationship, 49929))
            Sample.Order.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("OrderDate", InterSystems.Data.IRISTypes.ClientTypeId.tDate, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 49942))
            Sample.Order.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Total", InterSystems.Data.IRISTypes.ClientTypeId.tInt, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 35645))
            
            Sample.Order.CheckSumMethodDict.Add("CalcTotal", 43307)
            Sample.Order.CheckSumMethodDict.Add("CustomerIndex1Exists", 9133)
            Sample.Order.CheckSumMethodDict.Add("IDKEYDelete", 60615)
            Sample.Order.CheckSumMethodDict.Add("IDKEYExists", 9133)
            Sample.Order.CheckSumMethodDict.Add("IDKEYOpen", 14306)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Order.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Order.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Customer1
        '''</summary>
        Public Overridable Property Customer1() As Sample.Customer
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Customer))
                        Me.GetPropertyS("Customer1", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Customer)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Customer1", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Items
        '''</summary>
        Public Overridable Property Items() As InterSystems.Data.IRISTypes.IRISRelationshipObject
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(InterSystems.Data.IRISTypes.IRISRelationshipObject))
                        Me.GetPropertyS("Items", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,InterSystems.Data.IRISTypes.IRISRelationshipObject)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Items", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property OrderDate
        '''</summary>
        Public Overridable Property OrderDate() As InterSystems.Data.IRISTypes.IRISDate
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tDate)
                        Me.GetPropertyS("OrderDate", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISDateReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, InterSystems.Data.IRISTypes.ClientTypeId.tDate, false)
                        Me.SetPropertyS("OrderDate", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Total
        '''</summary>
        Public Overridable ReadOnly Property Total() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                        Me.GetPropertyS("Total", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
        End Property
        
        '''<summary>
        '''Projection of method CalcTotal
        '''</summary>
        Public Shared Function CalcTotal(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal ID As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    mtdSignature.Add(ID, false)
                    Sample.Order.RunClassMethodS(conn, Sample.Order.ServerClassName, "CalcTotal", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method CustomerIndex1Exists
        '''</summary>
        Public Shared Function CustomerIndex1Exists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Order.RunClassMethodS(conn, Sample.Order.ServerClassName, "CustomerIndex1Exists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Order.RunClassMethodS(conn, Sample.Order.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Order.RunClassMethodS(conn, Sample.Order.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Order))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Order.RunClassMethodS(conn, Sample.Order.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Order)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, concurrency, GetType(Sample.Order), status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, GetType(Sample.Order), status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, GetType(Sample.Order)),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, concurrency, timeout, GetType(Sample.Order), status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, concurrency, GetType(Sample.Order), propertyPaths, status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, concurrency, timeout, GetType(Sample.Order), propertyPaths, status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, GetType(Sample.Order), propertyPaths),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, concurrency, GetType(Sample.Order), status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, GetType(Sample.Order), status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, GetType(Sample.Order)),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, concurrency, timeout, GetType(Sample.Order), status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, concurrency, GetType(Sample.Order), propertyPaths, status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, concurrency, timeout, GetType(Sample.Order), propertyPaths, status),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Order
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Order.ServerClassName, id, GetType(Sample.Order), propertyPaths),Sample.Order)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Order.ExistsIdInternal(conn, Sample.Order.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Order.DeleteIdInternal(conn, Sample.Order.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Order.KillExtentInternal(conn, Sample.Order.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Order.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Order.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Order.ServerClassName)
            If metaInfo.Validate(Sample.Order.ClassCheckSum, Sample.Order.PropertyInfoColn, Sample.Order.CheckSumMethodDict, Sample.Order.CheckSumQueryDict, Sample.Order.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Order.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Order.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Order.AllPropertiesInfoColn
            End If
            Sample.Order.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Order.PropertyInfoColn)
            Return Sample.Order.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Order.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.OrderItem
    '''</summary>
    Partial Public Class OrderItem
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.OrderItem"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(30)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(3)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.OrderItem", GetType(OrderItem))
            
            Sample.OrderItem.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Quantity", InterSystems.Data.IRISTypes.ClientTypeId.tInt, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 30524))
            Sample.OrderItem.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("TheOrder", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 9074))
            Sample.OrderItem.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("TheProductStock", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 44068))
            
            Sample.OrderItem.CheckSumMethodDict.Add("IDKEYDelete", 55185)
            Sample.OrderItem.CheckSumMethodDict.Add("IDKEYExists", 19782)
            Sample.OrderItem.CheckSumMethodDict.Add("IDKEYOpen", 39971)
            Sample.OrderItem.CheckSumMethodDict.Add("TheProductStockIndexExists", 9133)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.OrderItem.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.OrderItem.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Quantity
        '''</summary>
        Public Overridable Property Quantity() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                        Me.GetPropertyS("Quantity", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Quantity", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property TheOrder
        '''</summary>
        Public Overridable Property TheOrder() As Sample.Order
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Order))
                        Me.GetPropertyS("TheOrder", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Order)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("TheOrder", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property TheProductStock
        '''</summary>
        Public Overridable Property TheProductStock() As Sample.ProductStock
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.ProductStock))
                        Me.GetPropertyS("TheProductStock", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.ProductStock)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("TheProductStock", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.OrderItem.RunClassMethodS(conn, Sample.OrderItem.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(id, true)
                    Sample.OrderItem.RunClassMethodS(conn, Sample.OrderItem.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.OrderItem))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.OrderItem.RunClassMethodS(conn, Sample.OrderItem.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(3),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.OrderItem)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method TheProductStockIndexExists
        '''</summary>
        Public Shared Function TheProductStockIndexExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.OrderItem.RunClassMethodS(conn, Sample.OrderItem.ServerClassName, "TheProductStockIndexExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, concurrency, GetType(Sample.OrderItem), status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, GetType(Sample.OrderItem), status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, GetType(Sample.OrderItem)),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, concurrency, timeout, GetType(Sample.OrderItem), status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, concurrency, GetType(Sample.OrderItem), propertyPaths, status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, concurrency, timeout, GetType(Sample.OrderItem), propertyPaths, status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, GetType(Sample.OrderItem), propertyPaths),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, concurrency, GetType(Sample.OrderItem), status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, GetType(Sample.OrderItem), status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, GetType(Sample.OrderItem)),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, concurrency, timeout, GetType(Sample.OrderItem), status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, concurrency, GetType(Sample.OrderItem), propertyPaths, status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, concurrency, timeout, GetType(Sample.OrderItem), propertyPaths, status),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.OrderItem
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.OrderItem.ServerClassName, id, GetType(Sample.OrderItem), propertyPaths),Sample.OrderItem)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.OrderItem.ExistsIdInternal(conn, Sample.OrderItem.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.OrderItem.DeleteIdInternal(conn, Sample.OrderItem.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.OrderItem.KillExtentInternal(conn, Sample.OrderItem.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.OrderItem.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.OrderItem.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.OrderItem.ServerClassName)
            If metaInfo.Validate(Sample.OrderItem.ClassCheckSum, Sample.OrderItem.PropertyInfoColn, Sample.OrderItem.CheckSumMethodDict, Sample.OrderItem.CheckSumQueryDict, Sample.OrderItem.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.OrderItem.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.OrderItem.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.OrderItem.AllPropertiesInfoColn
            End If
            Sample.OrderItem.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.OrderItem.PropertyInfoColn)
            Return Sample.OrderItem.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.OrderItem.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''This sample persistent class represents a person.<br>
    '''</summary>
    Partial Public Class Person
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Person"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(65)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(2)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(8)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Person", GetType(Person))
            
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Age", InterSystems.Data.IRISTypes.ClientTypeId.tInt, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 35645))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Car", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 26653))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("DOB", InterSystems.Data.IRISTypes.ClientTypeId.tDate, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 49942))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("FavoriteColors", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tListOfDT, 45590))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Home", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 33088))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 8998))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Office", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 33088))
            Sample.Person.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Spouse", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 57059))
            
            Sample.Person.CheckSumMethodDict.Add("Addition", 51540)
            Sample.Person.CheckSumMethodDict.Add("IDKEYDelete", 60615)
            Sample.Person.CheckSumMethodDict.Add("IDKEYExists", 9133)
            Sample.Person.CheckSumMethodDict.Add("IDKEYOpen", 10180)
            Sample.Person.CheckSumMethodDict.Add("NameDisplayToLogical", 54969)
            Sample.Person.CheckSumMethodDict.Add("NameIDXExists", 27132)
            Sample.Person.CheckSumMethodDict.Add("NameLogicalToDisplay", 6915)
            Sample.Person.CheckSumMethodDict.Add("NameLogicalToODBC", 6915)
            Sample.Person.CheckSumMethodDict.Add("NameODBCToLogical", 54969)
            Sample.Person.CheckSumMethodDict.Add("NinetyNine", 5360)
            Sample.Person.CheckSumMethodDict.Add("PrintPerson", 6932)
            Sample.Person.CheckSumMethodDict.Add("PrintPersons", 56133)
            Sample.Person.CheckSumMethodDict.Add("PrintPersonsSQL", 56133)
            Sample.Person.CheckSumMethodDict.Add("StoredProcTest", 65040)
            Sample.Person.CheckSumMethodDict.Add("UpdateProcTest", 29231)
            
            Sample.Person.CheckSumQueryDict.Add("ByName", 16223)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Person.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Person.ServerClassName)
        End Sub
        
        '''<summary>
        '''Person's age.<br>
        '''This is a calculated field whose value is derived from <property>DOB</property>.
        '''</summary>
        Public Overridable ReadOnly Property Age() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                        Me.GetPropertyS("Age", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
        End Property
        
        '''<summary>
        '''Person's car. This is a reference to another persistent object.
        '''</summary>
        Public Overridable Property Car() As Sample.Car
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Car))
                        Me.GetPropertyS("Car", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Car)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Car", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's Date of Birth.
        '''</summary>
        Public Overridable Property DOB() As InterSystems.Data.IRISTypes.IRISDate
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tDate)
                        Me.GetPropertyS("DOB", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISDateReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, InterSystems.Data.IRISTypes.ClientTypeId.tDate, false)
                        Me.SetPropertyS("DOB", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''A collection of strings representing the person's favorite colors.
        '''</summary>
        Public Overridable Property FavoriteColors() As InterSystems.Data.IRISTypes.IRISListOfStrings
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientObjTypeId.tListOfDT, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("FavoriteColors", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,InterSystems.Data.IRISTypes.IRISListOfStrings)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("FavoriteColors", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's home address. This uses an embedded object.
        '''</summary>
        Public Overridable Property Home() As Sample.Address1
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Address1))
                        Me.GetPropertyS("Home", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Address1)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Home", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's name.
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's office address. This uses an embedded object.
        '''</summary>
        Public Overridable Property Office() As Sample.Address1
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Address1))
                        Me.GetPropertyS("Office", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Address1)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Office", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Person's spouse. This is a reference to another persistent object.
        '''</summary>
        Public Overridable Property Spouse() As Sample.Person
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Person))
                        Me.GetPropertyS("Spouse", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Person)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Spouse", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''A simple, sample method: add two numbers (<var>x</var> and <var>y</var>) 
        '''and return the result.
        '''</summary>
        Public Overridable Function Addition(ByVal x As System.Nullable(Of Long), ByVal y As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    mtdSignature.Add(x, false)
                    mtdSignature.Add(y, false)
                    Me.RunMethodS("Addition", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Person))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Person)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Converts the input value <var>%val</var>, which is a string representing
        '''a name, into the internal format.
        '''<p>Returns the internal value of the input string <var>%val</var>.
        '''</summary>
        Public Shared Function NameDisplayToLogical(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameDisplayToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameIDXExists
        '''</summary>
        Public Shared Function NameIDXExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameIDXExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Converts the value of <var>%val</var> into a display string.
        '''<p>Returns the formatted value of <var>%val</var>.
        '''</summary>
        Public Shared Function NameLogicalToDisplay(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameLogicalToDisplay", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Converts the value of <var>%val</var> into a display string.
        '''<p>Returns the formatted value of <var>%val</var>.
        '''</summary>
        Public Shared Function NameLogicalToODBC(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameLogicalToODBC", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Converts the input value <var>%val</var>, which is a string representing
        '''a name, into the internal format.
        '''<p>Returns the internal value of the input string <var>%val</var>.
        '''</summary>
        Public Shared Function NameODBCToLogical(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal _argument1 As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(_argument1, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "NameODBCToLogical", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''A simple, sample expression method: returns the value 99.
        '''</summary>
        Public Overridable Function NinetyNine() As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    Me.RunMethodS("NinetyNine", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Function
        
        '''<summary>
        '''Prints the property <property>Name</property> to the console.
        '''</summary>
        Public Overridable Sub PrintPerson()
            Try 
                System.Threading.Monitor.Enter(Me.Connection)
                Me.AssertIsConnected
                Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Me.RunMethodS("PrintPerson", mtdSignature)
                Finally
                    mtdSignature.Clear
                    Me.Connection.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(Me.Connection)
            End Try
        End Sub
        
        '''<summary>
        '''Invoke the <method>PrintPerson</method> on all <class>Person</class> objects 
        '''within the database.
        '''</summary>
        Public Shared Sub PrintPersons(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "PrintPersons", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Prints out data on all persons within the database using SQL to 
        '''iterate over all the person data.
        '''</summary>
        Public Shared Sub PrintPersonsSQL(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "PrintPersonsSQL", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''This is a sample of how to define an SQL stored procedure using a 
        '''class method. This method can be called as a stored procedure via 
        '''ODBC or JDBC.<br>
        '''In this case this method returns the concatenation of a string value.
        '''</summary>
        Public Shared Function StoredProcTest(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal name As String, ByRef response As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(name, false)
                    mtdSignature.Add(response, true)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "StoredProcTest", mtdSignature)
                    response = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''This is a sample of how to define an SQL stored procedure using a 
        '''class method. This method can be called as a stored procedure via 
        '''ODBC or JDBC.<br>
        '''This method performs an SQL update operation on the database 
        '''using embedded SQL. The update modifies the embedded properties 
        '''<var>Home.City</var> and <var>Home.State</var> for all rows whose 
        '''<var>Home.Zip</var> is equal to <var>zip</zip>.
        '''</summary>
        Public Shared Function UpdateProcTest(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal zip As String, ByVal city As String, ByVal state As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    mtdSignature.Add(zip, false)
                    mtdSignature.Add(city, false)
                    mtdSignature.Add(state, false)
                    Sample.Person.RunClassMethodS(conn, Sample.Person.ServerClassName, "UpdateProcTest", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''A sample class query that defines a result set that returns Person data 
        '''ordered by <property>Name</property>.<br>
        '''This query can be used within another Cach&eacute; method (using the
        '''<class>%ResultSet</class> class), from Java, or from ActiveX.<br>
        '''This query is also accessible from ODBC and/or JDBC as the SQL stored procedure 
        '''<b>SP_Sample_By_Name</b>.
        '''</summary>
        Public Shared Function ByName(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISClient.IRISCommand
            Dim cmd As InterSystems.Data.IRISClient.IRISCommand = New InterSystems.Data.IRISClient.IRISCommand("{ call Sample.SP_Sample_By_Name(?)}", conn)
            Return cmd
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person)),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, GetType(Sample.Person), propertyPaths, status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, GetType(Sample.Person), propertyPaths, status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person), propertyPaths),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person)),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, GetType(Sample.Person), status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, GetType(Sample.Person), propertyPaths, status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, concurrency, timeout, GetType(Sample.Person), propertyPaths, status),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Person
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Person.ServerClassName, id, GetType(Sample.Person), propertyPaths),Sample.Person)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Person.ExistsIdInternal(conn, Sample.Person.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Person.DeleteIdInternal(conn, Sample.Person.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Person.KillExtentInternal(conn, Sample.Person.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Person.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Person.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Person.ServerClassName)
            If metaInfo.Validate(Sample.Person.ClassCheckSum, Sample.Person.PropertyInfoColn, Sample.Person.CheckSumMethodDict, Sample.Person.CheckSumQueryDict, Sample.Person.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Person.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Person.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Person.AllPropertiesInfoColn
            End If
            Sample.Person.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Person.PropertyInfoColn)
            Return Sample.Person.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Person.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.PopulateUtils
    '''</summary>
    Partial Public Class PopulateUtils
        Inherits InterSystems.Data.IRISTypes.IRISObject
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.PopulateUtils"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 49742
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(18)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(0)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(0)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.PopulateUtils", GetType(PopulateUtils))
            
            
            Sample.PopulateUtils.CheckSumMethodDict.Add("AccesaryName", 7498)
            Sample.PopulateUtils.CheckSumMethodDict.Add("City", 28057)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Company", 28057)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Currency", 6485)
            Sample.PopulateUtils.CheckSumMethodDict.Add("FirstName", 11314)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Float", 7054)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Integer", 50767)
            Sample.PopulateUtils.CheckSumMethodDict.Add("JPNPhone", 28057)
            Sample.PopulateUtils.CheckSumMethodDict.Add("JPNZip", 28057)
            Sample.PopulateUtils.CheckSumMethodDict.Add("LastName", 28057)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Material", 28057)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Mission", 28057)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Name", 11314)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Street", 28057)
            Sample.PopulateUtils.CheckSumMethodDict.Add("String", 7498)
            Sample.PopulateUtils.CheckSumMethodDict.Add("Title", 28057)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.PopulateUtils.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.PopulateUtils.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of method AccesaryName
        '''</summary>
        Public Shared Function AccesaryName(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal flg As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(flg, false)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "AccesaryName", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a random city name.
        '''</summary>
        Public Shared Function City(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "City", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a random company name.
        '''</summary>
        Public Shared Function Company(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Company", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a random currency value between <var>min</var> 
        '''and <var>max</var> (if present).
        '''</summary>
        Public Shared Function Currency(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal min As System.Nullable(Of Long), ByVal max As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    mtdSignature.Add(min, false)
                    mtdSignature.Add(max, false)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Currency", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a string containing a random first name.
        '''<p><var>gender</var> is a optional string used to control the 
        '''gender of the generated name: 1 is Male, 2 = Female, "" is either.
        '''</summary>
        Public Shared Function FirstName(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal gender As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(gender, false)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "FirstName", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a random floating point value between <var>min</var> 
        '''and <var>max</var> (if present).
        '''</summary>
        Public Shared Function Float(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal min As System.Nullable(Of Long), ByVal max As System.Nullable(Of Long), ByVal scale As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    mtdSignature.Add(min, false)
                    mtdSignature.Add(max, false)
                    mtdSignature.Add(scale, false)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Float", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a random integer value between <var>min</var> 
        '''and <var>max</var> (if present).
        '''</summary>
        Public Shared Function [Integer](ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal min As System.Nullable(Of Long), ByVal max As System.Nullable(Of Long)) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    mtdSignature.Add(min, false)
                    mtdSignature.Add(max, false)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Integer", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a random JPN phone number.
        '''</summary>
        Public Shared Function JPNPhone(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "JPNPhone", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method JPNZip
        '''</summary>
        Public Shared Function JPNZip(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "JPNZip", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a string containing a random last name.
        '''</summary>
        Public Shared Function LastName(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "LastName", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method Material
        '''</summary>
        Public Shared Function Material(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Material", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a string containing a randomly generated corporate mission statement.
        '''</summary>
        Public Shared Function Mission(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Mission", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a string containing a random name as <i>lastname,firstname</i>.
        '''<p><var>gender</var> is a optional string used to control the 
        '''gender of the generated name: 1 is Male, 2 = Female, "" is either.
        '''</summary>
        Public Shared Function Name(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal gender As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(gender, false)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Name", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a random street address.
        '''</summary>
        Public Shared Function Street(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Street", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a string value of length <var>len</var> 
        '''of a random character_$r(9999).
        '''</summary>
        Public Shared Function [String](ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal len As System.Nullable(Of Long)) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(len, false)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "String", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Returns a random Job Title.
        '''</summary>
        Public Shared Function Title(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    Sample.PopulateUtils.RunClassMethodS(conn, Sample.PopulateUtils.ServerClassName, "Title", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.PopulateUtils.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.PopulateUtils.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.PopulateUtils.ServerClassName)
            If metaInfo.Validate(Sample.PopulateUtils.ClassCheckSum, Sample.PopulateUtils.PropertyInfoColn, Sample.PopulateUtils.CheckSumMethodDict, Sample.PopulateUtils.CheckSumQueryDict, Sample.PopulateUtils.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.PopulateUtils.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.PopulateUtils.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.PopulateUtils.AllPropertiesInfoColn
            End If
            Sample.PopulateUtils.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.PopulateUtils.PropertyInfoColn)
            Return Sample.PopulateUtils.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.PopulateUtils.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Product
    '''</summary>
    Partial Public Class Product
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Product"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(31)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(3)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Product", GetType(Product))
            
            Sample.Product.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.Product.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("ProductSizes", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tRelationship, 13689))
            Sample.Product.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Supplier", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 58102))
            
            Sample.Product.CheckSumMethodDict.Add("IDKEYDelete", 60615)
            Sample.Product.CheckSumMethodDict.Add("IDKEYExists", 9133)
            Sample.Product.CheckSumMethodDict.Add("IDKEYOpen", 33601)
            Sample.Product.CheckSumMethodDict.Add("NameIndex1Exists", 10116)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Product.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Product.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Name
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property ProductSizes
        '''</summary>
        Public Overridable Property ProductSizes() As InterSystems.Data.IRISTypes.IRISRelationshipObject
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(InterSystems.Data.IRISTypes.IRISRelationshipObject))
                        Me.GetPropertyS("ProductSizes", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,InterSystems.Data.IRISTypes.IRISRelationshipObject)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("ProductSizes", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Supplier
        '''</summary>
        Public Overridable Property Supplier() As Sample.Supplier
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Supplier))
                        Me.GetPropertyS("Supplier", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Supplier)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Supplier", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Product.RunClassMethodS(conn, Sample.Product.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Product.RunClassMethodS(conn, Sample.Product.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Product))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Product.RunClassMethodS(conn, Sample.Product.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Product)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method NameIndex1Exists
        '''</summary>
        Public Shared Function NameIndex1Exists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Product.RunClassMethodS(conn, Sample.Product.ServerClassName, "NameIndex1Exists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, concurrency, GetType(Sample.Product), status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, GetType(Sample.Product), status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, GetType(Sample.Product)),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, concurrency, timeout, GetType(Sample.Product), status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, concurrency, GetType(Sample.Product), propertyPaths, status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, concurrency, timeout, GetType(Sample.Product), propertyPaths, status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, GetType(Sample.Product), propertyPaths),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, concurrency, GetType(Sample.Product), status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, GetType(Sample.Product), status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, GetType(Sample.Product)),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, concurrency, timeout, GetType(Sample.Product), status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, concurrency, GetType(Sample.Product), propertyPaths, status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, concurrency, timeout, GetType(Sample.Product), propertyPaths, status),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Product
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Product.ServerClassName, id, GetType(Sample.Product), propertyPaths),Sample.Product)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Product.ExistsIdInternal(conn, Sample.Product.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Product.DeleteIdInternal(conn, Sample.Product.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Product.KillExtentInternal(conn, Sample.Product.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Product.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Product.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Product.ServerClassName)
            If metaInfo.Validate(Sample.Product.ClassCheckSum, Sample.Product.PropertyInfoColn, Sample.Product.CheckSumMethodDict, Sample.Product.CheckSumQueryDict, Sample.Product.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Product.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Product.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Product.AllPropertiesInfoColn
            End If
            Sample.Product.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Product.PropertyInfoColn)
            Return Sample.Product.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Product.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.ProductSize
    '''</summary>
    Partial Public Class ProductSize
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.ProductSize"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(38)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(5)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.ProductSize", GetType(ProductSize))
            
            Sample.ProductSize.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("PID", InterSystems.Data.IRISTypes.ClientTypeId.tInt, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 35645))
            Sample.ProductSize.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Price", InterSystems.Data.IRISTypes.ClientTypeId.tInt, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 30524))
            Sample.ProductSize.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("ProductStocks", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tRelationship, 52040))
            Sample.ProductSize.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("SSize", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.ProductSize.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("TheProduct", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 21072))
            
            Sample.ProductSize.CheckSumMethodDict.Add("GetPID", 40977)
            Sample.ProductSize.CheckSumMethodDict.Add("IDKEYDelete", 55185)
            Sample.ProductSize.CheckSumMethodDict.Add("IDKEYExists", 19782)
            Sample.ProductSize.CheckSumMethodDict.Add("IDKEYOpen", 52083)
            Sample.ProductSize.CheckSumMethodDict.Add("SizeIndex1Exists", 10116)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.ProductSize.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.ProductSize.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property PID
        '''</summary>
        Public Overridable ReadOnly Property PID() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                        Me.GetPropertyS("PID", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
        End Property
        
        '''<summary>
        '''Projection of property Price
        '''</summary>
        Public Overridable Property Price() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                        Me.GetPropertyS("Price", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Price", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property ProductStocks
        '''</summary>
        Public Overridable Property ProductStocks() As InterSystems.Data.IRISTypes.IRISRelationshipObject
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(InterSystems.Data.IRISTypes.IRISRelationshipObject))
                        Me.GetPropertyS("ProductStocks", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,InterSystems.Data.IRISTypes.IRISRelationshipObject)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("ProductStocks", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property SSize
        '''</summary>
        Public Overridable Property SSize() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("SSize", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("SSize", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property TheProduct
        '''</summary>
        Public Overridable Property TheProduct() As Sample.Product
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Product))
                        Me.GetPropertyS("TheProduct", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Product)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("TheProduct", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method GetPID
        '''</summary>
        Public Shared Function GetPID(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal ID As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    mtdSignature.Add(ID, false)
                    Sample.ProductSize.RunClassMethodS(conn, Sample.ProductSize.ServerClassName, "GetPID", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.ProductSize.RunClassMethodS(conn, Sample.ProductSize.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(id, true)
                    Sample.ProductSize.RunClassMethodS(conn, Sample.ProductSize.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.ProductSize))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.ProductSize.RunClassMethodS(conn, Sample.ProductSize.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(3),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.ProductSize)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method SizeIndex1Exists
        '''</summary>
        Public Shared Function SizeIndex1Exists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.ProductSize.RunClassMethodS(conn, Sample.ProductSize.ServerClassName, "SizeIndex1Exists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, concurrency, GetType(Sample.ProductSize), status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, GetType(Sample.ProductSize), status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, GetType(Sample.ProductSize)),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, concurrency, timeout, GetType(Sample.ProductSize), status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, concurrency, GetType(Sample.ProductSize), propertyPaths, status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, concurrency, timeout, GetType(Sample.ProductSize), propertyPaths, status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, GetType(Sample.ProductSize), propertyPaths),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, concurrency, GetType(Sample.ProductSize), status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, GetType(Sample.ProductSize), status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, GetType(Sample.ProductSize)),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, concurrency, timeout, GetType(Sample.ProductSize), status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, concurrency, GetType(Sample.ProductSize), propertyPaths, status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, concurrency, timeout, GetType(Sample.ProductSize), propertyPaths, status),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.ProductSize
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductSize.ServerClassName, id, GetType(Sample.ProductSize), propertyPaths),Sample.ProductSize)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.ProductSize.ExistsIdInternal(conn, Sample.ProductSize.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.ProductSize.DeleteIdInternal(conn, Sample.ProductSize.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.ProductSize.KillExtentInternal(conn, Sample.ProductSize.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.ProductSize.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.ProductSize.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.ProductSize.ServerClassName)
            If metaInfo.Validate(Sample.ProductSize.ClassCheckSum, Sample.ProductSize.PropertyInfoColn, Sample.ProductSize.CheckSumMethodDict, Sample.ProductSize.CheckSumQueryDict, Sample.ProductSize.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.ProductSize.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.ProductSize.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.ProductSize.AllPropertiesInfoColn
            End If
            Sample.ProductSize.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.ProductSize.PropertyInfoColn)
            Return Sample.ProductSize.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.ProductSize.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.ProductStock
    '''</summary>
    Partial Public Class ProductStock
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.ProductStock"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(42)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(6)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.ProductStock", GetType(ProductStock))
            
            Sample.ProductStock.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Color", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            Sample.ProductStock.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("OrderItems", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tRelationship, 49929))
            Sample.ProductStock.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("PID", InterSystems.Data.IRISTypes.ClientTypeId.tInt, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 35645))
            Sample.ProductStock.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Quantity", InterSystems.Data.IRISTypes.ClientTypeId.tInt, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 30524))
            Sample.ProductStock.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("SSize", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 63983))
            Sample.ProductStock.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("TheProductSize", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 4385))
            
            Sample.ProductStock.CheckSumMethodDict.Add("ColorIndex1Exists", 10116)
            Sample.ProductStock.CheckSumMethodDict.Add("GetPID", 40977)
            Sample.ProductStock.CheckSumMethodDict.Add("GetSSize", 6441)
            Sample.ProductStock.CheckSumMethodDict.Add("IDKEYDelete", 55185)
            Sample.ProductStock.CheckSumMethodDict.Add("IDKEYExists", 19782)
            Sample.ProductStock.CheckSumMethodDict.Add("IDKEYOpen", 12773)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.ProductStock.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.ProductStock.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Color
        '''</summary>
        Public Overridable Property Color() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Color", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Color", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property OrderItems
        '''</summary>
        Public Overridable Property OrderItems() As InterSystems.Data.IRISTypes.IRISRelationshipObject
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(InterSystems.Data.IRISTypes.IRISRelationshipObject))
                        Me.GetPropertyS("OrderItems", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,InterSystems.Data.IRISTypes.IRISRelationshipObject)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("OrderItems", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property PID
        '''</summary>
        Public Overridable ReadOnly Property PID() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                        Me.GetPropertyS("PID", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
        End Property
        
        '''<summary>
        '''Projection of property Quantity
        '''</summary>
        Public Overridable Property Quantity() As System.Nullable(Of Long)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                        Me.GetPropertyS("Quantity", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Quantity", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property SSize
        '''</summary>
        Public Overridable ReadOnly Property SSize() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("SSize", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
        End Property
        
        '''<summary>
        '''Projection of property TheProductSize
        '''</summary>
        Public Overridable Property TheProductSize() As Sample.ProductSize
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.ProductSize))
                        Me.GetPropertyS("TheProductSize", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.ProductSize)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("TheProductSize", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method ColorIndex1Exists
        '''</summary>
        Public Shared Function ColorIndex1Exists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.ProductStock.RunClassMethodS(conn, Sample.ProductStock.ServerClassName, "ColorIndex1Exists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method GetPID
        '''</summary>
        Public Shared Function GetPID(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal ID As String) As System.Nullable(Of Long)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tInt)
                    mtdSignature.Add(ID, false)
                    Sample.ProductStock.RunClassMethodS(conn, Sample.ProductStock.ServerClassName, "GetPID", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISIntReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method GetSSize
        '''</summary>
        Public Shared Function GetSSize(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal ID As String) As String
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                    mtdSignature.Add(ID, false)
                    Sample.ProductStock.RunClassMethodS(conn, Sample.ProductStock.ServerClassName, "GetSSize", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.ProductStock.RunClassMethodS(conn, Sample.ProductStock.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(id, true)
                    Sample.ProductStock.RunClassMethodS(conn, Sample.ProductStock.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal K2 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.ProductStock))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(K2, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.ProductStock.RunClassMethodS(conn, Sample.ProductStock.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(3),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.ProductStock)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, concurrency, GetType(Sample.ProductStock), status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, GetType(Sample.ProductStock), status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, GetType(Sample.ProductStock)),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, concurrency, timeout, GetType(Sample.ProductStock), status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, concurrency, GetType(Sample.ProductStock), propertyPaths, status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, concurrency, timeout, GetType(Sample.ProductStock), propertyPaths, status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, GetType(Sample.ProductStock), propertyPaths),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, concurrency, GetType(Sample.ProductStock), status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, GetType(Sample.ProductStock), status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, GetType(Sample.ProductStock)),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, concurrency, timeout, GetType(Sample.ProductStock), status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, concurrency, GetType(Sample.ProductStock), propertyPaths, status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, concurrency, timeout, GetType(Sample.ProductStock), propertyPaths, status),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.ProductStock
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.ProductStock.ServerClassName, id, GetType(Sample.ProductStock), propertyPaths),Sample.ProductStock)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.ProductStock.ExistsIdInternal(conn, Sample.ProductStock.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.ProductStock.DeleteIdInternal(conn, Sample.ProductStock.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.ProductStock.KillExtentInternal(conn, Sample.ProductStock.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.ProductStock.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.ProductStock.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.ProductStock.ServerClassName)
            If metaInfo.Validate(Sample.ProductStock.ClassCheckSum, Sample.ProductStock.PropertyInfoColn, Sample.ProductStock.CheckSumMethodDict, Sample.ProductStock.CheckSumQueryDict, Sample.ProductStock.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.ProductStock.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.ProductStock.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.ProductStock.AllPropertiesInfoColn
            End If
            Sample.ProductStock.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.ProductStock.PropertyInfoColn)
            Return Sample.ProductStock.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.ProductStock.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Supplier
    '''</summary>
    Partial Public Class Supplier
        Inherits InterSystems.Data.IRISTypes.IRISPersistent
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Supplier"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 20841
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(27)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(2)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Supplier", GetType(Supplier))
            
            Sample.Supplier.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Address", InterSystems.Data.IRISTypes.ClientTypeId.tObject, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 33088))
            Sample.Supplier.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Name", InterSystems.Data.IRISTypes.ClientTypeId.tString, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 1518))
            
            Sample.Supplier.CheckSumMethodDict.Add("IDKEYDelete", 60615)
            Sample.Supplier.CheckSumMethodDict.Add("IDKEYExists", 9133)
            Sample.Supplier.CheckSumMethodDict.Add("IDKEYOpen", 44222)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Supplier.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Supplier.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Address
        '''</summary>
        Public Overridable Property Address() As Sample.Address1
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, GetType(Sample.Address1))
                        Me.GetPropertyS("Address", mtdSignature)
                        Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Address1)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, Me.Connection, Nothing, false)
                        Me.SetPropertyS("Address", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of property Name
        '''</summary>
        Public Overridable Property Name() As String
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tString)
                        Me.GetPropertyS("Name", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStringReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Name", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Supplier))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Supplier.RunClassMethodS(conn, Sample.Supplier.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Supplier)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier)),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, timeout, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, GetType(Sample.Supplier), propertyPaths, status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, timeout, GetType(Sample.Supplier), propertyPaths, status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier), propertyPaths),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier)),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, timeout, GetType(Sample.Supplier), status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, GetType(Sample.Supplier), propertyPaths, status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, concurrency, timeout, GetType(Sample.Supplier), propertyPaths, status),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Supplier
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Supplier.ServerClassName, id, GetType(Sample.Supplier), propertyPaths),Sample.Supplier)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Supplier.ExistsIdInternal(conn, Sample.Supplier.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Supplier.DeleteIdInternal(conn, Sample.Supplier.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Supplier.KillExtentInternal(conn, Sample.Supplier.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Supplier.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Supplier.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Supplier.ServerClassName)
            If metaInfo.Validate(Sample.Supplier.ClassCheckSum, Sample.Supplier.PropertyInfoColn, Sample.Supplier.CheckSumMethodDict, Sample.Supplier.CheckSumQueryDict, Sample.Supplier.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Supplier.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Supplier.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Supplier.AllPropertiesInfoColn
            End If
            Sample.Supplier.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Supplier.PropertyInfoColn)
            Return Sample.Supplier.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Supplier.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''SQL機能ガイド　4.2　以降で利用するSQL実行用メソッドを定義したクラス
    '''</summary>
    Partial Public Class Utils
        Inherits InterSystems.Data.IRISTypes.IRISSerialObject
        
        '''<summary>Server class name</summary>
        Public Const ServerClassName As String = "Sample.Utils"
        
        '''<summary>Meta information checksum</summary>
        Public Const ClassCheckSum As Long = 5120
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(5)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(0)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(0)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        '''<summary>
        '''ダイナミックSQLの実行
        '''</summary>
        Public Shared Sub PersonDynamicSQL(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Utils.RunClassMethodS(conn, Sample.Utils.ServerClassName, "PersonDynamicSQL", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''クラスクエリの実行:　先頭1行の取得
        '''</summary>
        Public Shared Sub PersonResultSet(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal name As String)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    mtdSignature.Add(name, false)
                    Sample.Utils.RunClassMethodS(conn, Sample.Utils.ServerClassName, "PersonResultSet", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Projection of method PersonSQLList
        '''</summary>
        Public Shared Sub PersonSQLList(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Utils.RunClassMethodS(conn, Sample.Utils.ServerClassName, "PersonSQLList", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''埋め込みSQLによるSELECT文（1行のみ）
        '''</summary>
        Public Shared Sub PersonSelect(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Utils.RunClassMethodS(conn, Sample.Utils.ServerClassName, "PersonSelect", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''埋め込みSQL：カーソルの利用
        '''</summary>
        Public Shared Sub PersonSelectAll(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Utils.RunClassMethodS(conn, Sample.Utils.ServerClassName, "PersonSelectAll", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Utils.ServerClassName)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Utils.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Utils.ServerClassName)
            If metaInfo.Validate(Sample.Utils.ClassCheckSum, Sample.Utils.PropertyInfoColn, Sample.Utils.CheckSumMethodDict, Sample.Utils.CheckSumQueryDict, Sample.Utils.GetAllPropertiesInfoColn) Then
                Return
            End If
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Utils.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Utils.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Utils.AllPropertiesInfoColn
            End If
            Sample.Utils.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Utils.PropertyInfoColn)
            Return Sample.Utils.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Utils.ServerClassName
        End Function
        
        '''<summary>Internal API</summary>
        Public Overrides Function IsClassGeneratedImpl() As Boolean
            Return true
        End Function
    End Class
End Namespace

Namespace Sample
    
    '''<summary>
    '''Projection of class Sample.Watch
    '''</summary>
    Partial Public Class Watch
        Inherits Sample.Accesary
        
        '''<summary>Server class name</summary>
        Public Shadows Const ServerClassName As String = "Sample.Watch"
        
        '''<summary>Meta information checksum</summary>
        Public Shadows Const ClassCheckSum As Long = 23631
        
        Private Shared CheckSumMethodDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(24)
        
        Private Shared CheckSumQueryDict As System.Collections.Generic.Dictionary(Of String, Integer) = New System.Collections.Generic.Dictionary(Of String, Integer)(1)
        
        Private Shared PropertyInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo) = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(1)
        
        Private Shared AllPropertiesInfoColn As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
        
        Shared Sub New()
            InterSystems.Data.IRISClient.BindingsConnection.AddClientTypeDescr("Sample.Watch", GetType(Watch))
            
            Sample.Watch.PropertyInfoColn.Add(New InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo("Waterproof", InterSystems.Data.IRISTypes.ClientTypeId.tBool, InterSystems.Data.IRISTypes.ClientObjTypeId.tUnknown, 56241))
            
            Sample.Watch.CheckSumMethodDict.Add("CreateAll", 12022)
            Sample.Watch.CheckSumMethodDict.Add("DestroyAll", 7044)
            Sample.Watch.CheckSumMethodDict.Add("IDKEYDelete", 11270)
            Sample.Watch.CheckSumMethodDict.Add("IDKEYExists", 58220)
            Sample.Watch.CheckSumMethodDict.Add("IDKEYOpen", 36383)
            
        End Sub
        
        '''<summary>Internal API</summary>
        Public Sub New()
            MyBase.New
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, <System.ParamArrayAttribute()> ByVal args() As Object)
            MyBase.New
            Me.Init(conn, Sample.Watch.ServerClassName, args)
        End Sub
        
        '''<summary>Constructor that wraps the %New class method</summary>
        Public Sub New(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            MyBase.New
            Me.Init(conn, Sample.Watch.ServerClassName)
        End Sub
        
        '''<summary>
        '''Projection of property Waterproof
        '''</summary>
        Public Overridable Property Waterproof() As System.Nullable(Of Boolean)
            Get
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.SetReturnType(Me.Connection, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                        Me.GetPropertyS("Waterproof", mtdSignature)
                        Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Get
            Set
                Try 
                    System.Threading.Monitor.Enter(Me.Connection)
                    Me.AssertIsConnected
                    Me.Connection.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                    Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = Me.Connection.GetMtdSignature
                    Try 
                        mtdSignature.Add(value, false)
                        Me.SetPropertyS("Waterproof", mtdSignature)
                    Finally
                        mtdSignature.Clear
                        Me.Connection.PostProcessing
                    End Try
                Finally
                    System.Threading.Monitor.Exit(Me.Connection)
                End Try
            End Set
        End Property
        
        '''<summary>
        '''Sample.Accesary、Sample.Jewel、Sample.Watch　の自動生成
        '''</summary>
        Public Overloads Shared Sub CreateAll(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal n As String)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    mtdSignature.Add(n, false)
                    Sample.Watch.RunClassMethodS(conn, Sample.Watch.ServerClassName, "CreateAll", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Sample.Accesary、Sample.Jewel、Sample.Watch　の一括削除
        '''</summary>
        Public Overloads Shared Sub DestroyAll(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tVoid)
                    Sample.Watch.RunClassMethodS(conn, Sample.Watch.ServerClassName, "DestroyAll", mtdSignature)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Sub
        
        '''<summary>
        '''Projection of method IDKEYDelete
        '''</summary>
        Public Overloads Shared Function IDKEYDelete(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long)) As InterSystems.Data.IRISTypes.IRISStatus
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tStatus)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    Sample.Watch.RunClassMethodS(conn, Sample.Watch.ServerClassName, "IDKEYDelete", mtdSignature)
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISStatusReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYExists
        '''</summary>
        Public Overloads Shared Function IDKEYExists(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByRef id As String) As System.Nullable(Of Boolean)
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, InterSystems.Data.IRISTypes.ClientTypeId.tBool)
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(id, true)
                    Sample.Watch.RunClassMethodS(conn, Sample.Watch.ServerClassName, "IDKEYExists", mtdSignature)
                    id = CType(mtdSignature.Arguments(1),InterSystems.Data.IRISTypes.IRISStringArgument).Value
                    Return CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISBooleanReturnValue).Value
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>
        '''Projection of method IDKEYOpen
        '''</summary>
        Public Overloads Shared Function IDKEYOpen(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal K1 As String, ByVal concurrency As System.Nullable(Of Long), ByRef sc As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Dim mtdSignature As InterSystems.Data.IRISTypes.IRISMethodSignature = conn.GetMtdSignature
                Try 
                    mtdSignature.SetReturnType(conn, GetType(Sample.Watch))
                    mtdSignature.Add(K1, false)
                    mtdSignature.Add(concurrency, false)
                    mtdSignature.Add(sc, conn, true)
                    Sample.Watch.RunClassMethodS(conn, Sample.Watch.ServerClassName, "IDKEYOpen", mtdSignature)
                    sc = CType(mtdSignature.Arguments(2),InterSystems.Data.IRISTypes.IRISStatusArgument).Value
                    Return CType(CType(mtdSignature.ReturnValue,InterSystems.Data.IRISTypes.IRISObjReturnValue).Value,Sample.Watch)
                Finally
                    mtdSignature.Clear
                    conn.PostProcessing
                End Try
            Finally
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, concurrency, GetType(Sample.Watch), status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, GetType(Sample.Watch), status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, GetType(Sample.Watch)),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, concurrency, timeout, GetType(Sample.Watch), status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, concurrency, GetType(Sample.Watch), propertyPaths, status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, concurrency, timeout, GetType(Sample.Watch), propertyPaths, status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %Open()</summary>
        Public Overloads Shared Function Open(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id() As Byte, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, GetType(Sample.Watch), propertyPaths),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, concurrency, GetType(Sample.Watch), status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, GetType(Sample.Watch), status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, GetType(Sample.Watch)),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, concurrency, timeout, GetType(Sample.Watch), status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, concurrency, GetType(Sample.Watch), propertyPaths, status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal concurrency As Integer, ByVal timeout As Integer, ByVal propertyPaths As System.Collections.IEnumerable, ByRef status As InterSystems.Data.IRISTypes.IRISStatus) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, concurrency, timeout, GetType(Sample.Watch), propertyPaths, status),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %OpenId()</summary>
        Public Overloads Shared Function OpenId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String, ByVal propertyPaths As System.Collections.IEnumerable) As Sample.Watch
            Try 
                System.Threading.Monitor.Enter(conn)
                conn.GeneratedAssembly = System.Reflection.[Assembly].GetExecutingAssembly
                Return CType(conn.OpenProxyObj(Sample.Watch.ServerClassName, id, GetType(Sample.Watch), propertyPaths),Sample.Watch)
            Finally
                conn.PostProcessing
                System.Threading.Monitor.Exit(conn)
            End Try
        End Function
        
        '''<summary>Projection of %ExistsId()</summary>
        Public Shadows Shared Function ExistsId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As System.Nullable(Of Boolean)
            Return Sample.Watch.ExistsIdInternal(conn, Sample.Watch.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %DeleteId()</summary>
        Public Shadows Shared Function DeleteId(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection, ByVal id As String) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Watch.DeleteIdInternal(conn, Sample.Watch.ServerClassName, id)
        End Function
        
        '''<summary>Projection of %KillExtent()</summary>
        Public Shadows Shared Function KillExtent(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection) As InterSystems.Data.IRISTypes.IRISStatus
            Return Sample.Watch.KillExtentInternal(conn, Sample.Watch.ServerClassName)
        End Function
        
        '''<summary>Internal API</summary>
        Public Shadows Shared Sub AddToRuntimeMetaInfoClassList(ByVal list As System.Collections.Generic.List(Of String))
            list.Add(Sample.Watch.ServerClassName)
            Sample.Accesary.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub AddToRuntimeMetaInfoClassListWrapper(ByVal list As System.Collections.Generic.List(Of String))
            Sample.Watch.AddToRuntimeMetaInfoClassList(list)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Shadows Shared Sub ValidateRuntimeMetaInfo(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Dim metaInfo As InterSystems.Data.IRISClient.ObjBind.MetaInfo.GenRuntimeClassDef = conn.GetGenRuntimeClassDef(Sample.Watch.ServerClassName)
            If metaInfo.Validate(Sample.Watch.ClassCheckSum, Sample.Watch.PropertyInfoColn, Sample.Watch.CheckSumMethodDict, Sample.Watch.CheckSumQueryDict, Sample.Watch.GetAllPropertiesInfoColn) Then
                Return
            End If
            Sample.Accesary.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Public Overrides Sub ValidateRuntimeMetaInfoWrapper(ByVal conn As InterSystems.Data.IRISClient.BindingsConnection)
            Sample.Watch.ValidateRuntimeMetaInfo(conn)
        End Sub
        
        '''<summary>Internal API</summary>
        Protected Shadows Shared Function GetAllPropertiesInfoColn() As System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)
            If (Not (Sample.Watch.AllPropertiesInfoColn) Is Nothing) Then
                Return Sample.Watch.AllPropertiesInfoColn
            End If
            Sample.Watch.AllPropertiesInfoColn = New System.Collections.Generic.List(Of InterSystems.Data.IRISClient.ObjBind.MetaInfo.PropertyInfo)(Sample.Watch.PropertyInfoColn)
            Sample.Watch.AllPropertiesInfoColn.InsertRange(Sample.Watch.AllPropertiesInfoColn.Count, Sample.Accesary.GetAllPropertiesInfoColn)
            Return Sample.Watch.AllPropertiesInfoColn
        End Function
        
        '''<summary>Class server name</summary>
        Public Overrides Function ClassServerName() As String
            Return Sample.Watch.ServerClassName
        End Function
    End Class
End Namespace
