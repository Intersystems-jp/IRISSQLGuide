<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="24" zv="Cache for Windows (x86-32) 2010.2.2 (Build 600U)" ts="2011-03-11 12:36:32">
<Class name="Sample.Address1">
<Description>
This is a sample embeddable class representing an address.</Description>
<SqlTableName>住所</SqlTableName>
<Super>%SerialObject,%Populate,%XML.Adaptor</Super>
<TimeChanged>62161,38221.241235</TimeChanged>
<TimeCreated>59161,40564.175</TimeCreated>

<Property name="Street">
<Description>
The street address.</Description>
<Type>%String</Type>
<Collection/>
<Relationship>0</Relationship>
<SqlFieldName>地名</SqlFieldName>
<Parameter name="MAXLEN" value="80"/>
</Property>

<Property name="City">
<Description>
The city name.</Description>
<Type>%String</Type>
<Collection/>
<Relationship>0</Relationship>
<SqlFieldName>都市</SqlFieldName>
<Parameter name="MAXLEN" value="80"/>
</Property>

<Property name="State">
<Description>
State(Province)</Description>
<Type>%String</Type>
<Collection/>
<Relationship>0</Relationship>
<SqlFieldName>都道府県</SqlFieldName>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="Zip">
<Description>
The 5-digit U.S. Zone Improvement Plan (ZIP) code.</Description>
<Type>%String</Type>
<Collection/>
<Relationship>0</Relationship>
<SqlFieldName>郵便番号</SqlFieldName>
<Parameter name="MAXLEN" value="7"/>
</Property>

<Method name="OnPopulate">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set id=$R($Get(^Yubin.ZenkokuD)+1)
	Set yubindata=^Yubin.ZenkokuD(id)
	Set ..Zip=$List(yubindata,4)
	Set ..State=$List(yubindata,8)
	Set ..City=$List(yubindata,9)
	Set ..Street=$List(yubindata,10)
	QUIT $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>Address1State</State>
<StreamLocation>^Sample.Address1S</StreamLocation>
<Data name="Address1State">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Street</Value>
</Value>
<Value name="2">
<Value>City</Value>
</Value>
<Value name="3">
<Value>State</Value>
</Value>
<Value name="4">
<Value>Zip</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Sample.Car">
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>62161,38196.243488</TimeChanged>
<TimeCreated>59837,41960.997637</TimeCreated>

<Property name="Maker">
<Type>Supplier</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="POPSPEC" value="##Class(Sample.PopulateUtils).String()"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.CarD</DataLocation>
<DefaultData>CarDefaultData</DefaultData>
<IdLocation>^Sample.CarD</IdLocation>
<IndexLocation>^Sample.CarI</IndexLocation>
<StreamLocation>^Sample.CarS</StreamLocation>
<Data name="CarDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Maker</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Sample.JNAME">
<Super>%Library.Name</Super>
<TimeChanged>62160,54826.226809</TimeChanged>
<TimeCreated>59559,37711.391392</TimeCreated>

<Method name="LogicalToDisplay">
<Description><![CDATA[
Converts the value of <var>%val</var> into a display string.
<p>Returns the formatted value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%Name=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $Piece(%val,",",1)_" "_$Piece(%val,",",2)
]]></Implementation>
</Method>

<Method name="DisplayToLogical">
<Description><![CDATA[
Converts the input value <var>%val</var>, which is a string representing
a name, into the internal format.
<p>Returns the internal value of the input string <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%String=""</FormalSpec>
<ReturnType>%Name</ReturnType>
<Implementation><![CDATA[	Quit $Piece(%val," ",1)_","_$Piece(%val,",",2)
]]></Implementation>
</Method>

<Method name="LogicalToODBC">
<Description><![CDATA[
Converts the value of <var>%val</var> into a display string.
<p>Returns the formatted value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%Name=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $Piece(%val,",",1)_" "_$Piece(%val,",",2)
]]></Implementation>
</Method>

<Method name="ODBCToLogical">
<Description><![CDATA[
Converts the input value <var>%val</var>, which is a string representing
a name, into the internal format.
<p>Returns the internal value of the input string <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%String=""</FormalSpec>
<ReturnType>%Name</ReturnType>
<Implementation><![CDATA[	Quit $Piece(%val," ",1)_","_$Piece(%val,",",2)
]]></Implementation>
</Method>
</Class>


<Class name="Sample.Person">
<Description><![CDATA[
This sample persistent class represents a person.<br>]]></Description>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>62161,45372.348386</TimeChanged>
<TimeCreated>59161,40564.612</TimeCreated>

<Parameter name="EXTENTSIZE">
<Default>100</Default>
</Parameter>

<Parameter name="EXTENTQUERYSPEC">
<Default>Name,Home.City,Home.State</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// define indices for this class

]]></Content>
</UDLText>

<Index name="NameIDX">
<Description><![CDATA[
Define an index for <property>Name</property>.]]></Description>
<Data>Name</Data>
<Properties>Name</Properties>
</Index>

<Index name="ZipCode">
<Description><![CDATA[
Define an index for embedded object property <b>ZipCode</b>.]]></Description>
<Type>bitmap</Type>
<Properties>Home.Zip</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[
// define properties for this class

]]></Content>
</UDLText>

<Property name="Name">
<Description>
Person's name.</Description>
<Type>JNAME</Type>
<Collection/>
<Relationship>0</Relationship>
<Required>1</Required>
<SqlFieldName>名前</SqlFieldName>
<Parameter name="POPSPEC" value="##Class(Sample.PopulateUtils).Name()"/>
</Property>

<Property name="DOB">
<Description>
Person's Date of Birth.</Description>
<Type>%Date</Type>
<Collection/>
<Relationship>0</Relationship>
<SqlFieldName>誕生日</SqlFieldName>
<Parameter name="POPSPEC" value="Date()"/>
</Property>

<Property name="Home">
<Description>
Person's home address. This uses an embedded object.</Description>
<Type>Address1</Type>
<Collection/>
<Relationship>0</Relationship>
<SqlFieldName>自宅</SqlFieldName>
</Property>

<Property name="Office">
<Description>
Person's office address. This uses an embedded object.</Description>
<Type>Address1</Type>
<Collection/>
<Relationship>0</Relationship>
<SqlFieldName>勤務先</SqlFieldName>
</Property>

<Property name="Spouse">
<Description>
Person's spouse. This is a reference to another persistent object.</Description>
<Type>Person</Type>
<Collection/>
<Relationship>0</Relationship>
<SqlFieldName>配偶者</SqlFieldName>
</Property>

<Property name="Car">
<Description>
Person's car. This is a reference to another persistent object.</Description>
<Type>Car</Type>
<SqlFieldName>車</SqlFieldName>
</Property>

<Property name="FavoriteColors">
<Description>
A collection of strings representing the person's favorite colors.</Description>
<Type>%String</Type>
<Collection>list</Collection>
<Relationship>0</Relationship>
<SqlFieldName>好きな色</SqlFieldName>
<Parameter name="JAVATYPE" value="java.util.List"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,赤,オレンジ,黄色,緑,青,紫,黒,白&quot;):2"/>
</Property>

<Property name="Age">
<Description><![CDATA[
Person's age.<br>
This is a calculated field whose value is derived from <property>DOB</property>.]]></Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<Collection/>
<Relationship>0</Relationship>
<SqlComputeCode> Set {年令}=$select({誕生日}="":"",1:$zdate($horolog,8)-$zdate({誕生日},8)\10000)</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>DOB</SqlComputeOnChange>
<SqlFieldName>年令</SqlFieldName>
</Property>

<Method name="PrintPerson">
<Description><![CDATA[
Prints the property <property>Name</property> to the console.]]></Description>
<CodeMode>code</CodeMode>
<FormalSpec/>
<ReturnType/>
<Implementation><![CDATA[
 Write !, "名前: ", ..Name
 Quit
]]></Implementation>
</Method>

<Method name="Addition">
<Description><![CDATA[
A simple, sample method: add two numbers (<var>x</var> and <var>y</var>) 
and return the result.]]></Description>
<CodeMode>code</CodeMode>
<FormalSpec>x:%Integer=1,y:%Integer=1</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[ Quit x + y // comment
]]></Implementation>
</Method>

<Method name="NinetyNine">
<Description>
A simple, sample expression method: returns the value 99.</Description>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[99
]]></Implementation>
</Method>

<Method name="PrintPersons">
<Description><![CDATA[
Invoke the <method>PrintPerson</method> on all <class>Person</class> objects 
within the database.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<ReturnType/>
<Implementation><![CDATA[

 // use the extent result set to find all person
 Set extent = ##class(%ResultSet).%New("Sample.Person:Extent")
 Do extent.Execute()

 While (extent.Next()) {
 	Set person = ..%OpenId(extent.GetData(1))
 	Do person.PrintPerson()
 }

 Quit
]]></Implementation>
</Method>

<Method name="PrintPersonsSQL">
<Description>
Prints out data on all persons within the database using SQL to 
iterate over all the person data.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec/>
<ReturnType/>
<Implementation><![CDATA[
 // use dynamic SQL result set to find person data
 Set query = ##class(%ResultSet).%New("%DynamicQuery:SQL")
 Do query.Prepare("SELECT ID, 名前 FROM Sample.Person ORDER BY 名前")
 Do query.Execute()

 While (query.Next()) {
 	Write !,"名前: ", query.Get("名前")
 }

 Quit
]]></Implementation>
</Method>

<Method name="StoredProcTest">
<Description><![CDATA[
This is a sample of how to define an SQL stored procedure using a 
class method. This method can be called as a stored procedure via 
ODBC or JDBC.<br>
In this case this method returns the concatenation of a string value.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[name:%String,&response:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<SqlName>Stored_Procedure_Test</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 // Set response to the concatenation of name.
 Set response = $Piece(name,",",1)_"  "_$Piece(name,",",2)
 QUIT response
]]></Implementation>
</Method>

<Method name="UpdateProcTest">
<Description><![CDATA[
This is a sample of how to define an SQL stored procedure using a 
class method. This method can be called as a stored procedure via 
ODBC or JDBC.<br>
This method performs an SQL update operation on the database 
using embedded SQL. The update modifies the embedded properties 
<var>Home.City</var> and <var>Home.State</var> for all rows whose 
<var>Home.Zip</var> is equal to <var>zip</zip>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>zip:%String,city:%String,state:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 &sql(UPDATE Sample.Person 
 SET 自宅_都市 = :city, 自宅_都道府県 = :state 
 WHERE 自宅_郵便番号 = :zip)

 // Return context information to client via %SQLProcContext object
 If ($g(%sqlcontext)'=$$$NULLOREF) { 
 Set %sqlcontext.SQLCode = SQLCODE
 Set %sqlcontext.RowCount = %ROWCOUNT
 }
 QUIT 1
]]></Implementation>
</Method>

<Query name="ByName">
<Description><![CDATA[
A sample class query that defines a result set that returns Person data 
ordered by <property>Name</property>.<br>
This query can be used within another Cach&eacute; method (using the
<class>%ResultSet</class> class), from Java, or from ActiveX.<br>
This query is also accessible from ODBC and/or JDBC as the SQL stored procedure 
<b>SP_Sample_By_Name</b>.]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>name:%String=""</FormalSpec>
<SqlName>SP_Sample_By_Name</SqlName>
<SqlProc>1</SqlProc>
<SqlQuery> SELECT ID, 名前, 誕生日
 FROM Sample.Person
 WHERE (名前 %STARTSWITH :name)
 ORDER BY 名前</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID:%Integer,名前:%String(MAXLEN=30),誕生日"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^Sample.PersonD</IdLocation>
<IndexLocation>^Sample.PersonI</IndexLocation>
<StreamLocation>^Sample.PersonS</StreamLocation>
<Data name="PersonDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>DOB</Value>
</Value>
<Value name="4">
<Value>Home</Value>
</Value>
<Value name="5">
<Value>Office</Value>
</Value>
<Value name="6">
<Value>Spouse</Value>
</Value>
<Value name="7">
<Value>Car</Value>
</Value>
<Value name="8">
<Value>FavoriteColors</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Sample.PopulateUtils">
<Super>%RegisteredObject</Super>
<TimeChanged>62161,42556.852179</TimeChanged>
<TimeCreated>59460,82229.802088</TimeCreated>

<Method name="City">
<Description>
Returns a random city name.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s t1=$lb("大阪市","札幌市","仙台市","大宮市","金沢市","横浜市","川崎市","福岡市","広島市","佐賀市","熊本市","松山市","鹿児島市","山口市","徳山市","岡山市","神戸市","京都市","福知山市","川西市","宝塚市","西宮市","池田市","豊中市","大阪市","奈良市")
 Quit $li(t1,$r($ll(t1))+1)
]]></Implementation>
</Method>

<Method name="Company">
<Description>
Returns a random company name.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set c1=$LB("住井","三友","ＮＴＳ","丸田","タクト","電金","新光","出光","アオキ","東川","富士","ディジタル","コスモ","プライス","暗電","総芝","つばさ","ラックス","東経","セコミ","ビーエスシ","SES","IDGG","小文社","ミック","高地歩","ストラテス")
 Set c2=$LB("商事","証券","銀行","損保","製造","機械","石油","情報","研究所","サービス","医療システム","ジャパン","システムズ","コミュニケーションズ","データ","ウェア","総業","工業","建設","技研","薬品")
 Set c3=$LB(" 株式会社"," 有限会社")
 Quit $LI(c1,$Random($LL(c1))+1)_$LI(c2,$random($LL(c2))+1)_$LI(c3,$random($LL(c3))+1)
]]></Implementation>
</Method>

<Method name="Currency">
<Description><![CDATA[
Returns a random currency value between <var>min</var> 
and <var>max</var> (if present).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>min:%Integer=0,max:%Integer=10000000</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[ Quit ##class(%PopulateUtils).Float(min,max,4)
]]></Implementation>
</Method>

<Method name="FirstName">
<Description><![CDATA[
Returns a string containing a random first name.
<p><var>gender</var> is a optional string used to control the 
gender of the generated name: 1 is Male, 2 = Female, "" is either.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gender:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 #; gender is 1:MALE,2:FEMALE
 s:$g(gender)="" gender=$r(2)+1
 If (gender = 1) {
 Set list = $LB("博康","新太郎","俊哉","実","一二三","俊夫",
 "幹夫","正行","渉","雅夫","誠一","博史",
 "直弘","孝雄","茂","徹",
 "雄三","道元","聡","弘明","敏明","信昭",
 "良成","哲治","芳郎","俊介","操",
 "英明","道夫","康之","仁孝","浩二郎","和彦",
 "一成","道裕","亮","武","英之","勝一郎",
 "哲郎","秀和","幸博","豊","道男","司","徹冶",
 "高志","昭","明雄","義彦","清司","保之",
 "徹也","勇","幸太郎","勝","信弘",
 "達也","勝彦","亮一","敏哉","寛文","照美",
 "克郎","貴英","正夫","崇","克道",
 "誠一","正一","孝","公人","泰久")
 }
 Else {
 Set list = $lb("茜","明子","晶子","あずみ","麻美",
 "泉","いずみ","ひとえ","仁美",
 "瞳","日登美","美穂","美保",
 "香織","和美","一美","馨","エミリ","エミ","恵美",
 "紀子","規子","由紀","雪","孝子","貴子","敏子",
 "俊子","恵","恵美","愛","藍","三咲",
 "美咲","みどり","みさえ","由紀子",
 "由貴","裕香","かなえ","幸子","祥子",
 "早苗","綾","彩","恵理子","エリカ",
 "江美","博美","浩美",
 "智子","友子","真紀","真樹","昌枝",
 "正枝","静江","順子","淳子","雅子","恭子",
 "京子","秀美","秀美",
 "伊代","千恵美","智恵美","洋子","陽子","静香","京香","千春")
 }
 Quit $LI(list,$Random($LL(list))+1)
]]></Implementation>
</Method>

<Method name="Float">
<Description><![CDATA[
Returns a random floating point value between <var>min</var> 
and <var>max</var> (if present).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>min:%Integer=0,max:%Integer=100000000,scale:%Integer=0</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 s float=min+$Random(max-min+1)
 q $s((float<max)&scale:+(float_"."_$Random(scalemax+1)),1:float)
]]></Implementation>
</Method>

<Method name="Integer">
<Description><![CDATA[
Returns a random integer value between <var>min</var> 
and <var>max</var> (if present).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>min:%Integer=0,max:%Integer=10000</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 If min>max Quit 0
 Quit min+$Random(max-min+1)
]]></Implementation>
</Method>

<Method name="LastName">
<Description>
Returns a string containing a random last name.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set x = $R(26)+1
 If (x = 1) 	{ Set list = $LB("伊藤","安部","梅田","石川","宇高") }
 ElseIf (x = 2)	{ Set list = $LB("大崎","江原","安藤","榎本","荒川","大田","上村","大谷","石丸","大野","小島","長田") }
 ElseIf (x = 3)	{ Set list = $LB("大林","石橋","石田","鬼塚","岩島","井口","小笠原","内野","大沢","岡本","上田","石村","小倉") }
 ElseIf (x = 4)	{ Set list = $LB("有海","井村","梅沢","大島","井上","上田","奥山","大幡","宇津木") }
 ElseIf (x = 5)	{ Set list = $LB("阿部","岩淵","荒川","大原","赤羽","新井","板谷") }
 ElseIf (x = 6)	{ Set list = $LB("金子","川島","河野","金沢","川越","川下") }
 ElseIf (x = 7)	{ Set list = $LB("甲斐","久保","小林","児玉","木内","亀谷","川原") }
 ElseIf (x = 8)	{ Set list = $LB("柏木","小谷","北川","川西","加藤","吉川","鎌田") }
 ElseIf (x = 9)	{ Set list = $LB("岸田","木村","川口") }
 ElseIf (x = 10)	{ Set list = $LB("佐藤","嵯峨","新庄","鈴木","島","塩田") }
 ElseIf (x = 11)	{ Set list = $LB("斉藤","笹原","正田","品川","杉山","砂川") }
 ElseIf (x = 12)	{ Set list = $LB("桜井","清水","関口","白井","篠田","境","坂口","志村","芝戸","高橋","多久和") }
 ElseIf (x = 13)	{ Set list = $LB("竹林","高松","田畑","高柳","田村","高藤","鷹野","田中","田畑","武田","高岡","滝藤","土井","中村","永尾") }
 ElseIf (x = 14)	{ Set list = $LB("中沢","中村","長島","中本","中元","野田","西山","乗口","野口") }
 ElseIf (x = 15)	{ Set list = $LB("西野","西本","西原","内藤","藤居","成井","波内") }
 ElseIf (x = 16)	{ Set list = $LB("野村","野原","永井","長塚","中武","根本","林","広本","樋口","平田","尾藤","花木") }
 ElseIf (x = 17)	{ Set list = $LB("廣田","本間","藤木") }
 ElseIf (x = 18)	{ Set list = $LB("古川","古田","尾藤","福居","日高") }
 ElseIf (x = 19)	{ Set list = $LB("本田","原田","平山","浜屋","橋本","平本","福嶋","長谷川","平島","吉野","廣瀬","細田") }
 ElseIf (x = 20)	{ Set list = $LB("古館","早川","吉野","森本","松尾","松田","松本") }
 ElseIf (x = 21)	{ Set list = $LB("宮崎","三沢","宮本","前川") }
 ElseIf (x = 22)	{ Set list = $LB("三好","枡屋","武藤","森永") }
 ElseIf (x = 23)	{ Set list = $LB("望月","丸山","森","溝上","三浦","丸谷","山本","山崎","吉村","安田") }
 ElseIf (x = 24)	{ Set list = $LB("山中","柳井","横山") }
 ElseIf (x = 25)	{ Set list = $LB("柳","山野","山原","山口") }
 ElseIf (x = 26)	{ Set list = $LB("渡辺","渡部","渡邊") }
 Quit $LI(list,$Random($LL(list))+1)
]]></Implementation>
</Method>

<Method name="Mission">
<Description>
Returns a string containing a randomly generated corporate mission statement.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set c1=$LB("リーダ ","ディベロッパ ","プロバイダ ","Resellers of ","On-line distributors of ")
 Set c2=$LB("advanced ","InterNet ","cutting-edge ","breakthrough ","complex ","high-performance ","scalable ","cross-platform ","just-in-time ","open ","personal ","high-tech ","high-touch ","open-source ","virtual ","interactive ")
 Set c3=$LB("quantum ","nano-","hyper-","optical ","financial ","multi-media ","object-oriented ","broad-band ","secure ","digital ","Java ","Enterprise ","Linux-based ","genetic ","wireless ","satellite-based ","ISO 9003-ready ","Y3K-certified ")
 Set c4=$LB("devices and ","instrumentation ","graphical ","XML ","InterNet ","application development ","database ","data warehouse ","forecasting ","voice-enabled ","cold-fusion powered ")
 Set c5=$LB("services ","technologies ","media ","content ","middle-ware ","connectivity ","consulting ","pharmaceuticals ")
 Set c6=$LB("for the InterNet.","for the Financial community.","for discriminating investors.","for the Entertainment industry.","for the home.","for the Fortune 5.","for the Fortune 50.","for the Fortune 500.","for the Fortune 5000.","for the enterprise.","for the desktop.","for the Health Care community.")
 Quit $LI(c1,$Random($LL(c1))+1)_$LI(c2,$random($LL(c2))+1)_$LI(c3,$random($LL(c3))+1)_$LI(c4,$random($LL(c4))+1)_$LI(c5,$random($LL(c5))+1)_$LI(c6,$random($LL(c6))+1)
]]></Implementation>
</Method>

<Method name="Name">
<Description><![CDATA[
Returns a string containing a random name as <i>lastname,firstname</i>.
<p><var>gender</var> is a optional string used to control the 
gender of the generated name: 1 is Male, 2 = Female, "" is either.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gender:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Quit ..LastName()_","_..FirstName($g(gender))
]]></Implementation>
</Method>

<Method name="String">
<Description><![CDATA[
Returns a string value of length <var>len</var> 
of a random character_$r(9999).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>len:%Integer=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s:'$g(len) len=1
 Set slist=$LB("メトロゴールド","モダンアミュズメント","モンスター","ラブラ","ラブラドル","ランドリー","ルショップシピー","レッドウッド","ロイヤルフラッシュ","６６６","フィラシューズ","フィールドライン","４５ｒｐｍ","フォワード","フラミンゴサルン","ブレイクビーツ","ボイコット","ボーダメイド","ポールスミス","ミリオンエア","メイドインワールド")
 s string=$List(slist,$R($LL(slist))+1)
 QUIT string
]]></Implementation>
</Method>

<Method name="Street">
<Description>
Returns a random street address.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s t1=$lb("Maple","Ash","Elm","Oak","Main","First","Second","Washington","Franklin","Clinton","Madison")
 s t2=$lb("Street","Avenue","Blvd","Court","Place","Drive")
 Quit ($r(9999)+1)_" "_$li(t1,$r($ll(t1))+1)_" "_$li(t2,$r($ll(t2))+1)
]]></Implementation>
</Method>

<Method name="Title">
<Description>
Returns a random Job Title.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set t1=$LB("","上級","副","アシスタント","戦略","国際","研究","エグゼクティブ")
 Set t2=$LB("エンジニア","営業担当","サポートエンジニア","開発担当","マーケティングマネージャ","アカウント担当","リソースディレクタ","ディレクタ","製品マネージャ","リサーチアシスタント","システムエンジニア","テクニシャン","ウェブマスタ","管理者","製品スペシャリスト","会計士","衛生士")
 Quit $LI(t1,$Random($LL(t1))+1)_$LI(t2,$random($LL(t2))+1)
]]></Implementation>
</Method>

<Method name="JPNPhone">
<Description>
Returns a random JPN phone number.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["0"_($Random(999))_"-"_($Random(9999))_"-"_($Random(9999))
]]></Implementation>
</Method>

<Method name="JPNZip">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[($Random(899)+100)_"-"_($Random(8999)+1000)
]]></Implementation>
</Method>

<Method name="Material">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set d1=$listbuild("プラチナ","18金","24金","ダイアモンド","シルバー","ピンクゴールド","クリスタル")
	quit $list(d1,$random($listlength(d1))+1)
]]></Implementation>
</Method>

<Method name="AccesaryName">
<ClassMethod>1</ClassMethod>
<FormalSpec>flg:%Integer=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//　腕時計の名前
	if flg=1 {
		set d1=$listbuild("エクスプローラー","コスモグラフ　デイトナ","トランスアトランティック",
		"ボルトギーゼ","スピードマスター","アクアテラ","パワーリザーブ","アエロナバル","シードゥエラー")
	}
	else {
		set d1=$listbuild("指輪","ネックレス","ペンダント","イヤリング","ピアス","ブローチ","カフスチャーム")
	}
	quit $list(d1,$random($listlength(d1))+1)
]]></Implementation>
</Method>
</Class>


<Class name="Sample.Supplier">
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>62161,38182.779273</TimeChanged>
<TimeCreated>59837,42748.245337</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="POPSPEC" value="##Class(Sample.PopulateUtils).String()"/>
</Property>

<Property name="Address">
<Type>Sample.Address1</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.SupplierD</DataLocation>
<DefaultData>SupplierDefaultData</DefaultData>
<IdLocation>^Sample.SupplierD</IdLocation>
<IndexLocation>^Sample.SupplierI</IndexLocation>
<StreamLocation>^Sample.SupplierS</StreamLocation>
<Data name="SupplierDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Address</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
